{
  "common": {
    "loading": "ᐃᓗᓪᓕᖅᐸᓪᓕᐊᔪᖅ...",
    "contentManager.title": "ᐃᓗᓕᖏᓐᓄᑦ ᒥᐊᓂᖅᓯᔨ",
    "contentManager.openTab": "Open {{name}} Tab",
    "thing.collapse": "Collapse {{name}}",
    "thing.expand": "Expand {{name}}",
    "search": "ᕿᓂᕐᓗᒍ",
    "results": "ᑐᑭᖏᑦ",
    "noResults": "ᑐᑭᖏ ᐱᑕᖃᖏᑐᑦ",
    "soundBrowser.title": "ᓂᐱᖏ",
    "soundBrowser.title.collection": "ᓂᐱᖏ ᑲᑎᖅᓱᐊᑦ",
    "soundBrowser.title.featuredArtist": "ᑐᓵᒐᐅᒐᔪᖅᑐᖅ ᑎᑕᒃᑎ",
    "soundBrowser.title.recommendations": "ᐊᑐᓕᖁᔭᐅᔪᑦ",
    "soundBrowser.button.addSound": "ᓂᐱᑖᖅᑎᓪᓗᒍ",
    "soundBrowser.button.showOnlyStars": "ᓄᐃᑕᓂᖓ ᑭᓯᒻᒥ",
    "soundBrowser.button.showOnlyStarsDescriptive": "Show only favorites",
    "soundBrowser.button.backToTop": "Back To Top",
    "filter": "ᐊᓯᖏᓐᓂᒃ ᐊᑐᖏᑎᑦᓯᓂᖅ",
    "startQuickTour": "ᐱᒋᐊᕐᓂᐊᕐᓗᓐᓂ ᐃᓕᓐᓂᐊᕈᑦ",
    "switchThemeLight": "Switch to dark color theme",
    "switchThemeDark": "Switch to light color theme",
    "reportError": "ᑕᒻᒫᔭᕐᒪᑦ ᓇᓗᓇᐃᑯᑕᖅ",
    "whatsNew": "What's New",
    "leave": "ᓴᓇᖏᓚᐅᕐᓂᖅ",
    "soundBrowser.expandSoundFolder": "Expand sound folder {{folder}}",
    "soundBrowser.expandFilters": "Expand sound browser filter button panel",
    "soundBrowser.collapseFilters": "Collapse sound browser filter button panel",
    "soundBrowser.clearFilters": "Clear filters",
    "soundBrowser.filterDropdown.artists": "ᑎᑕᒃᑎᑦ",
    "soundBrowser.filterDropdown.genres": "ᐊᖑᑕᐅᓂᖓ ᐊᕐᓇᐅᓂᖓ",
    "soundBrowser.filterDropdown.instruments": "ᑎᑕᐅᑎᑦ",
    "soundBrowser.filterDropdown.keys": "Keys",
    "soundBrowser.clip.tooltip.file": "ᑎᑎᖃᑦ",
    "soundBrowser.clip.tooltip.folder": "ᑎᑎᖃᑦ ᐴᖓ",
    "soundBrowser.clip.tooltip.artist": "ᑎᑕᒃᑎ",
    "soundBrowser.clip.tooltip.genre": "ᐊᕐᓇᖅ ᐊᖑᑦ",
    "soundBrowser.clip.tooltip.instrument": "ᑎᑕᐅᑦ",
    "soundBrowser.clip.tooltip.originalTempo": "ᓂᐱᑐᖃᖓ",
    "soundBrowser.clip.tooltip.year": "ᐅᑭᐅᖓ",
    "soundBrowser.clip.tooltip.previewSound": "ᑕᑯᒃᓴᐅᓂᐊᖅᑐᑉ ᓂᐱᖓ",
    "soundBrowser.clip.tooltip.markFavorite": "ᐱᐅᒋᔭᐅᓂᖓᓄ ᓇᓗᓇᐃᑯᑕᖅ",
    "soundBrowser.clip.tooltip.paste": "ᓂᐱᑎᓪᓗᒍ ᐋᕿᒃᓱᐃᔪᒻᒧᑦ",
    "soundBrowser.clip.tooltip.key": "Key Signature",
    "scriptBrowser.filterDropdown.clearFilter": "Clear Filter by {{filterName}}",
    "scriptBrowser.filterDropdown.owner": "ᓇᖕᒥᓂᓕᒃ",
    "scriptBrowser.filterDropdown.fileType": "ᑎᑎᖃᑉ ᓇᓕᐊᖑᓂᖓ",
    "scriptBrowser.filterDropdown.filterBy": "Filter By {{filter}}",
    "scriptBrowser.filterDropdown.filterByFile": "Filter By File Type",
    "scriptBrowser.filterDropdown.filterByOwner": "Filter By Owner",
    "scriptBrowser.filterDropdown.sortBy": "ᐊᕕᒃᑐᕐᓗᒍ",
    "scriptBrowser.filterDropdown.sortByName": "Sort By {{filtername}}",
    "scriptBrowser.showDeleted": "ᓄᖑᑎᕐᓂᑯ ᑕᑯᒃᓴᐅᓗᓂ",
    "scriptBrowser.deletedscripts": "ᓄᖑᑎᖅᓯᒪᔪᑦ ᐅᖃᒐᒃᓴᑦ",
    "scriptBrowser.openInEditor": "Open {{name}} in Code Editor",
    "scriptBrowser.restore": "ᐃᓕᖁᓯᖓᓄᑦ ᐅᑎᖅᑎᓂᖅ",
    "scriptBrowser.options.close": "Close Script Options",
    "scriptBrowser.collab.sharedWith": "Shared with {{collaborators}}",
    "scriptBrowser.shared.sharedBy": "Shared by {{username}}",
    "script.options.copy": "Create Copy of {{scriptname}}",
    "keepUnsavedTabs": "ᐊᓯᐅᒌᑯᑎᖃᖏᑐᑦ ᐅᑯᐃᖅᓯᒪᑐᐃᓐᓇᕐᓗᒋᑦ",
    "discardChanges": "Discard changes",
    "script": "ᐅᖃᐅᓯᕐᓄᑦ ᒪᓕᒋᐊᓕᒃ",
    "version": "ᓇᓕᐊᖑᓂᖓ",
    "numSounds": "{{count}} sound",
    "numSounds_plural": "{{count}} sounds",
    "script_plural": "ᐅᖃᐅᓯᕐᓄᑦ ᒪᓕᒋᐊᓖᑦ",
    "scriptBrowser.myScripts": "ᑎᑎᖃᑦ ᐅᖃᒐᒃᓴᑦ",
    "scriptBrowser.sharedScripts": "ᐊᒥᖃᒐᒃᓴᑦ ᐅᖃᐅᓯᒃᓴᑦ",
    "daw.title": "ᖃᕆᑕᐅᔭᑯᑦ ᓂᐱᓐᓂᒃ ᑐᓵᔾᔪᑦ",
    "daw.shortTitle": "DAW",
    "daw.effect": "ᐊᒃᑐᐃᓂᖓ",
    "daw.effect_plural": "ᐊᒃᑐᐃᓂᖏᑦ",
    "daw.tooltip.reset": "ᐃᓕᖁᓯᖓᓄᑦ ᐅᑎᖅᑎᓪᓗᒍ",
    "daw.tooltip.play": "ᐱᖑᐊᕐᓗᒍ",
    "daw.tooltip.loopProject": "ᐃᓱᐃᑦᑐᖅ ᐱᓕᕆᐊᖅ",
    "daw.tooltip.pause": "ᓄᖃᖅᑎᓚᐅᕐᓗᒍ",
    "daw.tooltip.autoScroll": "ᐃᖕᒥᓂᒃ ᓄᐃᐸᓕᐊᔪᑦ ᐱᒋᐊᕐᕕᖓᓐᓄᑦ",
    "daw.tooltip.toggleMetronome": "Toggle Metronome",
    "daw.tooltip.toggleVolume": "ᐅᐊᔪᑎᖓᑕ ᓂᐱᖅᖁᖅᑐᓂᖓ",
    "daw.tooltip.solo": "ᐊᑕᐅᓯᑐᖅ",
    "daw.tooltip.mute": "ᓂᐸᐃᕈᑎᓗᒍ",
    "daw.tooltip.muteTrack": "Mute track {{name}}",
    "daw.tooltip.unmuteTrack": "Unmute track {{name}}",
    "daw.tooltip.soloTrack": "Solo track {{name}}",
    "daw.tooltip.unsoloTrack": "Solo off for track {{name}}",
    "daw.abbreviation.solo": "S",
    "daw.abbreviation.mute": "M",
    "daw.tooltip.toggleEffects": "ᐅᐊᔪᑎᖏᑦ ᖃᓄᐃᑐᒥᐊᑦ",
    "daw.bypass": "ᐊᑉᓗᕈᑦ",
    "daw.needsSync": "Run the script to sync the DAW",
    "newScript": "ᓄᑖᖅ ᐅᖃᒐᒃᓴᖅ",
    "editor.title": "ᓈᓴᐅᑎᖏᓐᓂᒃ ᐋᕿᒃᓱᐃᔪᑦ",
    "editor.blocksMode": "ᐃᓕᖁᓯᖓᓐᓂᒃ ᐊᔪᓕᖅᑎᑦᓯᔪᑦ",
    "editor.autocomplete": "Autocomplete",
    "editor.playArrows": "Playback Arrows",
    "editor.blocksMode.tooltip-enable": "Enable blocks mode",
    "editor.autocomplete.tooltip-enable": "Enable autocomplete",
    "editor.blocksMode.tooltip-disable": "Disable blocks mode",
    "editor.autocomplete.tooltip-disable": "Disable autocomplete",
    "editor.run": "ᑲᔪᓯᒥᐊᕐᓗᓂ",
    "editor.undoEdit": "Undo Code Edit",
    "editor.redoEdit": "Redo Code Edit",
    "editor.noScriptsLoaded": "ᐃᓕᓯᖏᑐᑎᑦ ᐅᖃᕆᐊᓕᖕᓂᒃ ᑎᑎᕋᖅᓯᒪᔪᓐᓂᒃ.",
    "editor.clickHereCreateScript": "ᐅᓇ ᓇᕿᓪᓗᒍ ᓄᑖᒻᒥᒃ ᑎᑎᖃᕐᓂᐊᕐᓗᓐᓂ ᐅᖃᕆᐊᓕᖕᓂᒃ!",
    "editor.mode": "ᒫᓐᓇ ᐅᕙᓂᓯᐅᖅᐳᑎᑦ <span class=\"empty-script-lang\">{{scriptlang}}</span> mode.",
    "editor.ifYouWant": "ᐅᕗᖓ ᓅᑦᑐᐊᕐᓂᕈᕕᑦ <span class=\"empty-script-lang\">{{otherScriptLang}}</span> mode, <br /> ᒪᑐᐃᖅᓯᓗᑎᑦ ᑎᑎᖃᒻᒥᒃ ᐅᖃᕆᐊᓕᖕᒥᒃ ᐅᓇ ᐊᑐᕐᓗᒍ <span class=\"empty-script-lang\">{{otherScriptExt}}</span> ᓄᑖᒥᒡᒡᓗᕙ ᓴᓇᓗᑎᑦ <br /> ᓂᕈᐊᕐᓗᒍᓗ <span class=\"empty-script-lang\">{{otherScriptLang}}</span> ᐅᖃᕆᐊᓕᐅᑉ ᑎᑎᖃᑉ ᐅᖃᐅᓯᕆᓂᐊᖅᑕᖓᓐᓂᒃ.",
    "editor.stepCount": "{{count}} step",
    "editor.stepCount_plural": "{{count}} steps",
    "tabs.otherTabs": "ᐊᓯᖏ ᓇᕿᑕᐅᑎᑦ",
    "tabs.closeAll": "ᑕᒪᕐᒥᒃ ᒪᑐᓂᐊᕐᓗᒋᑦ",
    "footer.teachers": "ᐃᓕᓐᓂᐊᖅᑎᑦᓯᔨᑦ",
    "footer.help": "ᐃᑲᔪᕈᑦ / ᑐᓴᖅᑎᓪᓗᒍ",
    "thing.open": "ᒪᑐᕐᓗᒍ",
    "thing.close": "ᒪᑐᓗᒍ",
    "script.copy": "ᐊᔨᖓᓐᓂᒃ ᓴᓇᓂᐊᕐᓗᓐᓂ",
    "script.rename": "ᐊᓯᐊᓂᒃ ᐊᑎᓕᕐᓗᒍ",
    "script.download": "ᖃᕆᑕᐅᔭᒻᒧᑦ ᐃᓕᓂᐊᕐᓗᒍ",
    "script.print": "ᐊᓕᓚᔪᒻᒧᑦ ᐃᓕᓂᐊᕐᓗᒍ",
    "script.share": "ᐊᒥᖃᕐᓗᒍ",
    "script.submitCompetition": "ᐋᒃᑐᖃᑕᐅᔪᒪᓐᓂᕈᕕᑦ",
    "script.submitCompetitionrDescriptive": "Submit {{name}} to Competition",
    "script.history": "ᓄᑕᐅᖏᑐᑦ",
    "script.historyDescriptive": "Show {{name}} History",
    "script.codeIndicator": "ᓈᓴᐅᑎᖓᑕ ᓇᓗᓇᐃᑯᑕᖓ",
    "script.codeIndicatorDescriptive": "Code Indicator for {{name}}",
    "script.import": "ᐊᓯᐊᓐᓂᑦ ᑕᑯᔪᒪᒍᕕᑦ",
    "script.delete": "ᓄᖑᑎᕐᓗᒍ",
    "sharedScript.noDescription": "ᑕᒻᓇ ᐊᑎᖃᖏᑐᖅ ᑎᑎᖃᑦ ᐊᖃᕆᐊᓕᒃ.",
    "sharedScript.originalAuthor": "ᑎᑎᕋᓚᐅᖅᑐᖅ",
    "sharedScript.collaborators": "ᐊᓯᖏᓐᓂᒃ ᐃᑲᔪᖅᑎᐅᔪᑦ",
    "sharedScript.license": "ᓚᐃᓴᖓᓐᓂᒃ ᑎᑎᕋᖅᓯᒪᔪᖅ",
    "sharedScript.viewOnlyLink": "ᑕᒪᕐᒥᒃ ᑕᑯᓗᒋᑦ ᑎᑎᕋᕐᓂᑯᑦ",
    "lastModified": "ᑭᖑᓪᓕᖅ ᐋᑭᒐᐅᓚᐅᖅᑐᖅ",
    "ok": "ᓈᒻᒪᒃᑐᖅ",
    "confirm": "ᓈᒻᒪᒋᓗᒍ",
    "default": "ᐃᓕᖁᓯᑐᖃᖓ",
    "importToEdit": "ᐊᓯᐊᖑᕈᒪᒍᖕᓂ",
    "notifications.title": "ᖃᐅᔨᒪᔪᑏᑦ",
    "notifications.pinned": "ᐊᑕᐃᓐᓇᕐᓂᐊᖅᑐᑦ ᖃᐅᔨᒪᔪᑏᑦ",
    "notifications.other": "ᐊᓯᖏ ᖃᐅᔨᒪᔪᑏᑦ",
    "notifications.viewAll": "ᑕᒪᕐᒥᒃ ᑕᑯᓗᒋᑦ",
    "notifications.markAllRead": "ᐅᖃᓕᒫᒐᓂᒃᓯᒪᔪᑦ ᑕᒪᕐᒥᒃ",
    "forgotPassword.title": "ᐃᓯᕈᖕᓇᐅᑏᑦ ᐳᐃᒍᕈᖕᓂ?",
    "forgotPassword.prompt": "ᖃᕆᑕᐅᔭᒥ ᑎᑎᕋᕈᑏᑦ ᐃᓕᓗᒍ",
    "forgotPassword.submit": "ᓴᑐᕈᒪᒍᖕᓂ",
    "forgotPassword.email": "ᖃᕆᑕᐅᔭᒥ ᑎᑎᕋᕐᕕᒃᓴᕕᑦ ᑐᕌᕈᑎᖓ",
    "createResetAccount": "ᓴᓴᖤᐊᕐᓗᑎᑦ / ᐃᑎᕈᖕᓇᐅᑏᑦ ᐋᕿᒍᒪᒍᖕᓂ",
    "accountCreator.prompt": "ᐃᓯᕈᖕᓇᐅᑎᓕᐅᕐᓂᖅ",
    "accountCreator.success": "ᐃᓯᕈᖕᓇᐅᑎᑖᖅᐳᑎᑦ!",
    "accountCreator.submit": "ᐃᓯᕈᖕᓇᐅᑎᓕᐅᕈᒪᒍᕕᑦ",
    "formfieldPlaceholder.username": "ᓇᐃᓕᒋᐊᖅᓯᒪᔪᖅ ᐊᑏᑦ",
    "formfieldPlaceholder.password": "ᐃᓯᕈᖕᓇᐅᑏᑦ",
    "formfieldPlaceholder.confirmPassword": "ᐃᓯᕈᖕᓇᐅᑏᑦ ᓈᒻᒪᒋᒍᖕᓂ",
    "formFieldPlaceholder.email": "ᖃᕆᑕᐅᔭᑯᑦ ᑐᕌᕈᑏᑦ",
    "formFieldPlaceholder.emailOptional": "ᖃᕆᑕᐅᔭᒥ ᑐᕌᕈᑏᑦ (ᐊᑐᕈᒪᒍᖕᓂ)",
    "formFieldPlaceholder.emailOptional.usedFor": "We only use this if you forget your password",
    "formFieldPlaceholder.firstName": "ᐊᑏᑦ ᓯᕗᓪᓕ",
    "formFieldPlaceholder.lastName": "ᐊᑏᑦ ᑭᖑᓪᓕᖅ",
    "formFieldPlaceholder.currentPassword": "Verify your current password",
    "formFieldPlaceholder.newPassword": "ᓄᑖᖅ ᐃᑎᕈᖕᓇᐅᑏᑦ",
    "formFieldPlaceholder.confirmNewPassword": "ᐊᖏᕐᓗᒍ ᓄᑖᖅ ᐃᑎᕈᖕᓇᐅᑏᑦ",
    "cancel": "ᓴᑐᐃᓗᒍ",
    "update": "ᓄᑖᖑᕐᓗᒍ",
    "save": "ᐃᓕᓗᒍ",
    "saveAndSend": "ᐃᓕᓗᒍ ᐊᒪ ᐊᐅᓚᖅᑎᓪᓗᒍ",
    "upload": "ᑕᑯᔪᒪᒍᖕᓂ",
    "editProfile": "ᐊᕿᒡᓗᒍ ᐃᓕᖕᓂᒃ ᐅᖃᐅᓯᓖᑦ",
    "registerAccount": "ᓄᑖᒻᒥᒃ ᐃᑎᕈᖕᓇᐅᑎᑖᕐᓗᑎᑦ",
    "logout": "Logout",
    "notifications.none": "ᖃᐅᔨᒪᔪᑎᖃᖏᑐᖅ.",
    "notifications.doNotDisturbEnabled": "Notification Pop-ups: OFF",
    "notifications.doNotDisturbDisabled": "Notification Pop-ups: ON",
    "notifications.switchDoNotDisturbOff": "Enable Notification Pop-ups",
    "notifications.switchDoNotDisturbOn": "Disable Notifications Pop-ups",
    "profileEditor.prompt": "ᐃᓕᖕᓂᒃ ᐅᖃᐅᓯᓕᒃ ᐊᓯᐊᖑᕐᓗᒍ {{ᐊᑏᑦ ᓇᐃᓕᒋᐊᖅᓯᒪᔪᖅ}}",
    "profileEditor.error": "ᑕᒻᒪᖅᓯᒪᔪᖅ ᐃᓕᖕᓂᒃ ᐅᖃᐅᓯᖃᖅᑐᖅ.",
    "profileEditor.success": "ᐃᓕᖕᓂᒃ ᐅᖃᐅᓯᖃᖅᑐᖅ ᓄᑕᖑᖅᑎᑕᐅᔪᖅ!",
    "changePassword.prompt": "ᐊᓯᖑᕐᓗᒍ ᐃᓯᕈᖕᓇᐅᑏᑦ",
    "changePassword.success": "ᐃᓯᕈᖕᓇᐅᑎᖓ ᐊᓯᐊᖑᖅᑕᐅᔪᖅ!",
    "download.multiTrack": "ᐊᓯᖏᑦ ᑐᓵᔭᒃᓴᑦ",
    "scriptHistory.running": "ᐅᖃᕆᐊᓕᖕᓂᒃ ᑎᑎᖃᓐᓂᒃ ᐊᑐᒐᒃᓴᖅ...",
    "scriptHistory.versionSuccess": "ᑕᒻᓇ ᐊᑐᒐᒃᓴᖅ ᑲᔪᓯᑎᐊᖅᑐᖅ.",
    "scriptHistory.versionError": "ᐊᑐᕈᒪᔭᖅ ᑕᒻᒪᖅᓯᒪᔪᖅ.",
    "scriptHistory.restore": "ᐃᓕᖁᓯᖓᓐᓄᑦ ᐅᑎᖅᑎᓪᓗᒍ ᐊᑐᒐᒃᓴᖅ",
    "scriptHistory.title": "ᖃᓄᐃᑑᓂᖓ ᐆᒻᒪ {{scriptName}}",
    "scriptHistory.heading": "ᖃᓄᐃᑑᓂᖓ ᐊᑐᓚᐅᖅᑐᑉ",
    "scriptHistory.diff": "ᐊᓯᐊᖑᔪᖅ ᓯᕗᓪᓕᐅᑉ ᐊᑐᓚᐅᖅᑐᑉ",
    "scriptHistory.activeCollab": "ᐊᑐᒐᐅᔪᑦ ᐱᓕᕆᖃᑕᐅᔪᑦ",
    "scriptHistory.onlyMyScripts": "ᐅᑎᖅᑕᐅᔪᓪᓗᐊᖅᑐᖅ ᑭᓯᐊᓐᓂ ᐊᑎᖃᕐᓗᒍ $t(scriptBrowser.myScripts)",
    "scriptHistory.fetching": "ᓄᑕᐅᖏᑐᓐᓂᒃ ᑕᑯᓂᐊᕐᓗᓐᓂ...",
    "renameScript.title": "ᓄᑕᒻᒥᒃ ᐊᑎᓕᕐᓗᒍ ᑎᑎᖃᖅ ᐊᖃᕆᐊᓕᒃ",
    "renameScript.prompt": "ᓄᑖᖅ ᐊᑎᖓ ᑎᑎᕋᐅᑉ ᐊᖃᕆᐊᓕᐅᑉ:",
    "rename.submit": "ᓄᑕᖅ ᐊᑎᖓ",
    "renameScript.appendSuffix": "ᓯᕗᓪᓕᐊᕈᓯᖓ ᐃᓕᓗᒍ",
    "renameScript.alreadyExists": "ᐅᖃᕆᐊᓕᐅᑉ ᐊᑎᖓ '{{scriptName}}' ᖃᕆᑕᐅᔭᕐᓂᓯᐅᓕᖅᑐᖅ.`",
    "renameSound.title": "ᓂᐱᖓ ᓄᑖᖅ ᐊᑎᖓ",
    "renameSound.prompt": "ᓄᑖᖅ ᐊᑎᖓ ᓂᐱᓕᐅᖅᓯᒪᔪᑉ:",
    "create": "ᓴᓇᓗᒍ",
    "scriptCreator.title": "ᓄᑕᖅ ᐊᑎᖓ ᐅᖃᕆᐊᓕᐅᑉ ᑎᑎᖃᑉ",
    "scriptCreator.scriptName": "ᐅᖃᕆᐊᓕᐅᑉ ᐊᑎᖓ",
    "scriptCreator.scriptName.subtext": "ᓱᓇᒥᒃ ᐊᑎᖃᕐᓂᐊᖅᐸ ᐅᖃᕆᐊᓕᒃ ᓴᓇᔭᑦ?",
    "scriptCreator.scriptLang": "ᐅᖃᐅᓯᖓ ᐅᖃᕆᐊᓕᐅᑉ",
    "scriptCreator.scriptLang.subtext": "ᖃᓄᐃᑐᒥᒃ ᐅᖃᐅᓯᕐᒥᒃ ᐊᑐᖅᐱᓐ?",
    "scriptAnalysis.title": "ᓈᓴᐅᑎᑦ-ᑎᑎᖃᐃᑦ ᓇᓗᓇᐃᑯᑕᖓ ᐅᒻᒪ {{scriptName}}",
    "scriptAnalysis.category.loops": "ᐊᓯᖏᓐᓄᑦ",
    "scriptAnalysis.category.conditionals": "ᒪᓕᒐᖃᖅᑐᖅ",
    "scriptAnalysis.category.conditionalsWithBool": "ᒪᓕᒐᖏᑦ ᐆᒻᒪ Booleans",
    "scriptAnalysis.category.lists": "ᑎᑎᖃᑦ",
    "scriptAnalysis.category.listStringOps": "ᐊᑎᖏᑦ ᐊᒪ ᓇᓕᐊᖑᓂᖏᓐᓄᑦ ᐊᐅᓚᑕᐅᓂᖏᑦ",
    "scriptAnalysis.category.userFunctions": "ᐊᑐᖅᑎᐅᔪᑉ ᐊᐅᓚᔪᑎᖏ",
    "category": "ᐊᑯᒃᓯᒪᓂᖓ",
    "count": "ᖃᑉᓯᐅᓂᖏ",
    "total": "ᑲᑎᓪᓗᒋᑦ",
    "exit": "ᐊᓂᓗᓐᓂ",
    "more": "ᐃᓚᖏᑦ",
    "scriptShare.title": "ᐊᒥᖃᕐᓂᖅ \"{{scriptName}}\"",
    "scriptShare.tab.viewonly.downloadShortcutFile": "Download URL Shortcut File",
    "scriptShare.tab.viewonly.title": "ᐊᓯᖏᓐᓄᑦ ᑕᑯᔭᐅᔫᓪᓗᐊᕐᓗᓐᓂ",
    "scriptShare.tab.viewonly.linkTitle": "ᐊᓯᖏᓐᓄᑦ ᑕᑯᔭᐅᔫᓪᓗᐊᕈᑦ",
    "scriptShare.tab.viewonly.shareCurrent": "ᐊᓯᖏᓐᓄᑦ ᑕᑯᔭᐅᔪᑎᑉ ᐊᑐᐊᒐᖓ",
    "scriptShare.tab.viewonly.shareFuture": "ᐊᒥᖃᕐᓗᒋᑦ ᐊᓯᐊᖑᕈᑎᑦ",
    "scriptShare.tab.viewonly.otherUsers": "ᐊᐅᓚᖅᑎᓪᓗᒍ ᑕᑯᔪᑎᑦ ᐊᓯᖏᓐᓄᑦ ᐊᑐᖅᑎᑕᐅᔪᓐᓄᑦ",
    "scriptShare.tab.viewonly.usersPlaceholder": "ᓇᓗᓇᐃᑯᑕᖓ ᑎᑎᕋᕐᓗᒍ, ᐊᕕᒃᓯᒪᓗᒍ.",
    "scriptShare.tab.collab.title": "ᐊᓯᖏᓐᓄᑦ ᐋᕿᒃᓱᖅᑕᐅᓗᓐᓂ",
    "scriptShare.tab.collab.addRemove": "ᐃᓚᓗᒍ ᐱᕐᓗᒍᓗᓐᓂᑦ ᐱᓕᕆᖃᑎᒌᖕᓂᖅ",
    "scriptShare.tab.embed.title": "ᐊᒥᖃᕐᓗᒍ ᓇᓗᓇᖅᓯᓯᒪᔪᖅ ᐅᖃᕆᐊᓕᒃ ᑎᑎᖃᖅ",
    "scriptShare.tab.embed.linkTitle": "ᓇᓗᓇᖅᓯᓯᒪᔪᖅ IFrame code",
    "scriptShare.tab.embed.showCode": "ᓈᓴᐅᑎᖓ ᑕᑯᒃᓴᐅᓗᓂ:",
    "scriptShare.tab.embed.showDAW": "ᑕᑯᒃᓴᐅᓗᓐᓂ DAW:",
    "scriptShare.copyClipboard": "ᐊᔪᖃᖅᓯᒪᓗᒍ ᐃᓕᓯᑉᕕᖕᒧᑦ",
    "soundUploader.title": "ᐃᓚᓯᓗᓐᓂ ᓄᑖᒻᒥᒃ ᐃᒻᖏᐅᒻᒥᒃ",
    "soundUploader.title.upload": "ᓂᐱᓕᐅᕐᓗᒍ ᐃᒻᖏᐅᑦ",
    "soundUploader.title.record": "ᓂᐱᓕᐅᕌᓚᒋᐊᕐᓗᒍ",
    "soundUploader.file.prompt": "ᑐᖁᐃᕕᖓ ᒪᑐᓗᒍ ...",
    "soundUploader.constantRequired": "ᑲᔪᓯᔪᑉ ᐊᑎᖓ (ᐱᔭᕆᐊᓕᒃ)",
    "soundUploader.tempoOptional": "ᓂᐱᖓ (ᐊᑐᕈᖕᓇᖅᑐᖅ)",
    "soundUploader.constantPlaceholder.synth": "e.g. MYSYNTH_01",
    "soundUploader.constantPlaceholder.recording": "e.g. MYRECORDING_01",
    "soundUploader.constantPlaceholder.sound": "e.g. MYSOUND_01",
    "soundUploader.record.measures.title": "ᐆᒃᑐᕋᐅᑎᖓᑕ ᐅᐊᔪᑎᖓ",
    "soundUploader.record.measures.metronomeClick": "ᓇᕿᓪᓗᒍ ᓂᐱᓕᐅᖅᑎᓪᓗᑎᑦ",
    "soundUploader.record.measures.tempo": "ᓂᐱᖓ (ᖃᑉᓰᖅᑕᕐᓂᖓ ᒥᓂᑦᒥ)",
    "soundUploader.record.measures.countoff": "ᑭᓯᔾᔪᑎᖓ",
    "soundUploader.record.measures.toRecord": "ᑭᓯᔪᑎᖓ ᓂᐱᓕᐅᕐᓂᐊᕐᓗᓐᓂ",
    "soundUploader.record.prompt": "ᓂᐱᓕᐅᓕᕐᓗᒍ",
    "soundUploader.record.getReady": "ᐊᑐᐃᓐᓇᕈᕐᓂᖅ!",
    "metronome": "Metronome",
    "clear": "Clear",
    "soundUploader.record.mic.waiting": "ᐅᖃᕐᕕᖓ ᐊᑐᐃᓇᐅᓂᖓᓐᓂᒃ ᐅᑕᕿᓂᖅ ...",
    "soundUploader.record.mic.reenable": "ᐅᖃᕐᕕᖓ ᐊᔪᖏᓕᖅᑎᓪᓗᒍ ᐆᒃᑐᑲᓐᓂᕐᓗᓂᓗ.",
    "soundUploader.record.firefoxMacError": "Sorry, recording in EarSketch currently does not work in Firefox on Mac. Please use Chrome or Safari.",
    "soundUploader.freesound.description": "ᖃᕆᑕᐅ.ᒻᒥ ᐊᒥᓱᑎᐊᒥᐊᑦ ᐊᑭᖃᖏᑐᑦ ᓂᐱᒃᓴᑦ, ᓂᐱᓕᐅᖅᓯᒪᔪᑦ ᐊᑕᓐᓂᓯᐅᖅᑐᑦ Creative Commons ᓚᐃᓴᖏᓐᓂ. ᕿᓂᕈᖕᓇᖅᐳᑎᑦ ᐅᕙᓐᓂ Freesound ᐊᓯᐅᑕᐃᓕᔪᒻᒥᒃ ᑎᑎᕋᕐᓗᑎᑦ ᐅᕗᖓ EarSketch ᐊᑖᓐᓂ.",
    "soundUploader.freesound.searching": "ᕿᓂᕐᓂᖅ Freesound...",
    "soundUploader.freesound.uploadedBy": "ᓂᐱᓕᐅᕐᓗᒍ ᐅᕗᖓ Freesound ᐊᑐᖅᑎᑕᖓᓐᓄᑦ {{userName}}",
    "formattedTime.justNow": "ᒡᒪᓐᓇᐅᔪᖅ",
    "formattedTime.recently": "ᐊᑯᓂᐅᖏᑐᖅ",
    "formattedTime.minutesAgo": "1 ᒥᓂᑦ ᐱᐊᓂᒃᑐᖅ",
    "formattedTime.minutesAgo_plural": "{{count}} ᒥᓂᑦᖑᓚᐅᖅᑐᑦ",
    "formattedTime.hoursAgo": "1 ᐃᑲᕋᖅ ᐊᑕᐅᓯᖅ",
    "formattedTime.hoursAgo_plural": "{{count}} ᐃᑲᕋᑦ ᐱᐊᓂᒃᑐᑦ",
    "formattedTime.daysAgo": "ᐃᒃᐸᒃᓴᖅ",
    "formattedTime.daysAgo_plural": "{{count}} ᐅᑉᓗᑦ ᐱᐊᓂᒃᑐᑦ",
    "formattedTime.weeksAgo": "ᐱᓇᓱᐊᕈᓯᕐᒥ",
    "formattedTime.weeksAgo_plural": "{{count}} ᐱᓇᓱᐊᕈᓯᐅᓚᐅᖅᑐᒻᒥ",
    "formattedTime.monthsAgo": "ᑕᕿᐅᓚᐅᖅᑐᒻᒥ",
    "formattedTime.monthsAgo_plural": "{{count}} ᑕᕿᐅᓚᐅᖅᑐᓐᓂ",
    "formattedTime.yearsAgo": "ᐊᕌᓐᓂ",
    "formattedTime.yearsAgo_plural": "{{count}} ᐅᑭᐅᒐᓴᐃᑦ",
    "curriculum.title": "ᐃᓕᓐᓂᐊᕈᑎᑦ",
    "curriculum.switchScriptLanguage": "ᐊᓯᐊᓐᓂᒃ ᐅᖃᐅᓯᖃᓕᕐᓗᓐᓂ ᑎᑎᕋᖅᓯᒪᔪᖅ",
    "curriculum.showTOC": "ᐃᓗᓕᖏᓐᓂᒃ ᑕᑯᔪᑕᐅᔪᖅ",
    "curriculum.toc": "ᐃᓗᓕᖏᑦ",
    "curriculum.open": "Open Curriculum",
    "curriculum.close": "Close Curriculum",
    "curriculum.previousPage": "ᒪᒃᐱᐅᓚᐅᖅᑐᖅ",
    "curriculum.nextPage": "ᓄᑕᖅ ᒪᒃᐱᖅ",
    "curriculum.copyURL": "ᐊᔨᓕᐅᕐᓗᒍ ᖃᕆᑕᐅᔭᒥ ᑕᑯᔪᑎᖓ URL",
    "curriculum.expandUnitDescriptive": "Expand Unit: {{title}}",
    "curriculum.collapseUnit": "Collapse Unit",
    "curriculum.expandUnit": "Expand Unit",
    "curriculum.collapseUnitDescriptive": "Collapse Unit: {{title}}",
    "curriculum.expandChapterDescriptive": "Expand Chapter: {{title}}",
    "curriculum.collapseChapterDescriptive": "Collapse Chapter: {{title}}",
    "curriculum.expandChapter": "Expand Chapter",
    "curriculum.collapseChapter": "Collapse Chapter",
    "curriculum.openSection": "Open Section: {{section}}: ",
    "curriculum.closeSection": "Close Section: {{section}}: ",
    "shortcuts.run": "Run script",
    "shortcuts.save": "Save script",
    "shortcuts.undo": "Undo",
    "shortcuts.redo": "Redo",
    "shortcuts.comment": "Comment code",
    "shortcuts.autocomplete": "Autocomplete",
    "shortcuts.zoomHorizontal": "Zoom (Horizontal)",
    "shortcuts.zoomVertical": "Zoom (Vertical)",
    "shortcuts.escapeEditor": "Escape editor focus",
    "hardware.ctrl": "Ctrl",
    "hardware.cmd": "Cmd",
    "hardware.shift": "Shift",
    "hardware.alt": "Alt",
    "hardware.option": "Option",
    "hardware.enter": "Enter",
    "hardware.space": "Space",
    "hardware.wheel": "Mouse Wheel",
    "hardware.esc": "Esc",
    "hardware.tab": "Tab",
    "errorReport.header": "Report an error"
  },
  "ariaDescriptors": {
    "api.closeFunctionDetails": "Close {{functionName}} function details",
    "api.openFunctionDetails": "Open {{functionName}} function details",
    "contentManager.close": "Close Content Manager",
    "contentManager.scriptName": "Script Name",
    "curriculum.switchScriptLanguage": "Switch script language to {{language}}",
    "daw.horizontalScroll": "Horizontal scroll",
    "daw.horizontalZoomIn": "Horizontal zoom in",
    "daw.horizontalZoomOut": "Horizontal zoom out",
    "daw.verticalScroll": "Vertical scroll",
    "daw.verticalZoomIn": "Vertical zoom in",
    "daw.verticalZoomOut": "Vertical zoom out",
    "editor.redoEditDisabled": "Redo edit disabled",
    "editor.undoEditDisabled": "Undo edit disabled",
    "editor.settings": "Editor Settings",
    "general.openPanel": "Open {{panelName}}",
    "general.selected": "Selected",
    "general.notSelected": "Not selected",
    "header.fontSize": "Select Font Size",
    "header.selectLanguage": "Select Language",
    "header.settings": "Settings and Additional Options",
    "header.shortcuts": "Show/Hide Keyboard Shortcuts",
    "header.toggleNotifications": "Show/Hide Notifications",
    "header.unreadNotifications": "You have {{numUnread}} unread notifications",
    "scriptBrowser.close": "Close {{scriptname}}",
    "scriptBrowser.delete": "Delete {{scriptname}}",
    "scriptBrowser.download": "Download {{scriptname}}",
    "scriptBrowser.import": "Import {{scriptname}}",
    "scriptBrowser.open": "Open {{scriptname}}",
    "scriptBrowser.options": "Script Options for {{scriptname}}",
    "scriptBrowser.print": "Print {{scriptname}}",
    "scriptBrowser.rename": "Rename {{scriptname}}",
    "scriptBrowser.restore": "Restore {{scriptname}}",
    "scriptBrowser.share": "Share {{scriptname}}",
    "sounds.clearFilter": "Clear sound browser search and filters",
    "sounds.paste": "Paste {{name}} to the code editor",
    "sounds.preview": "Preview sound {{name}}",
    "skipLink.contentManager": "Skip to Content Manager",
    "skipLink.curriculum": "Skip to Curriculum",
    "skipLink.daw": "Skip to Digital Audio Workstation",
    "skipLink.editor": "Skip to Code Editor",
    "skipLink.navigation": "Skip to Navigation",
    "sounds.artistFilter": "Select one or more artists to filter by",
    "sounds.genreFilter": "Select one or more genres to filter by",
    "sounds.instrumentFilter": "Select one or more instruments to filter by",
    "sounds.keyFilter": "Select one or more key signatures to filter by"
  },
  "bubble": {
    "userLanguage": "ᐅᖃᐅᓯᖓ",
    "script.name": "ᑕᑯᐊᓪᓚᒋᐊᕐᓂᖅ",
    "selectLanguage": "Select programming language",
    "defaultProgrammingLanguage": "ᐊᕿᒃᓯᒪᔪᑐᖃᖅ ᐅᖃᐅᓯᖅ ᐊᑐᒐᐅᓂᐊᖅᑐᖅ",
    "dialogTitle": "Quick tour page {{page}} out of {{total}}",
    "screenreaderIntro": "Please note, all 9 steps of the EarSketch tour are listed below in an unordered list. Select the \"$t(bubble:buttons.close)\" button when you are ready to use EarSketch.",
    "screenreaderCloseTour": "Please note: In order to close the tour at any point, select the \"$t(bubble:buttons.close)\" button.",
    "buttons": {
      "skip": "ᐊᑉᓗᕐᓗᒍ",
      "skipTour": "ᐃᓕᓂᐊᕈᑦ ᐊᑉᓗᕐᓗᒍ",
      "start": "ᐱᒋᐊᕐᕕᖓ",
      "close": "ᒪᑐᔪᖅ",
      "next": "ᑐᒡᓕᐊ"
    },
    "header": {
      "start": "ᑐᖓᓱᒋᑦ ᐅᕗᖓ EarSketch",
      "codeEditor": "1/8 ᓈᓴᐅᑎᓐᓂᒃ ᐋᕿᒃᓱᐃᔪᑦ (Code Editor)",
      "runCode": "2/8 ᒡᓇᓴᐅᑎ ᓇᓗᓇᐃᑯᑕᖓ ᐊᑐᕐᓗᒍ",
      "previewMusic": "3/8 ᓂᐱᓕᐅᕐᓂᑯᑦ ᑐᓵᑲᓂᕐᓗᒍ",
      "playMusic": "4/8 ᑐᓵᔪᒪᓐᓂᕈᖕᓂ",
      "exploreCode": "5/8 ᒡᓇᓴᐅᑎᑦ ᓱᓇᐅᓂᖏᓐᓂᒃ ᑕᑯᒋᐊᕐᓂᖅ",
      "addSounds": "6/8 ᓂᐱᓐᓂᒃ ᐃᓚᓯᔪᑦ ᓇᓴᐅᑎᓐᓄᑦ",
      "saveCode": "7/8 ᐊᓯᐅᑎᑕᐅᓕᓗᒍ ᓈᓴᐅᑎᑦ",
      "readCurriculum": "8/8 ᐅᖃᓗᓕᒫᕐᓗᒍ ᐃᓕᓐᓂᐊᕈᑎᑦ",
      "end": "End"
    },
    "body": {
      "start": "ᐊᑐᐃᓐᓇᐅᓕᖅᐱᑦ ᓈᓴᐅᑎᓐᓂᒃ ᐃᒻᖏᐅᑎᓕᐅᕐᓗᑎᓪᓗ ᐱᒋᐊᕐᓂᖅ? ᓯᕗᓪᓕᕐᒥᒃ ᐊᑐᕐᓂᐊᕈᖕᓂ, ᓇᕿᓪᓗᒍ <span class=\"border-2 border-black rounded-full px-2 bg-black text-white font-thin\">Start</span> ᐊᑕᓐᓂ ᐃᓕᓂᐊᕈᑎᑉ EarSketch ᐃᓗᐊᖅᓴᐅᑎ. ᐊᑐᖅᓯᒪᓐᓂᕈᖕᓂ, ᓇᕿᓪᓗᒍ <span class=\"border-2 border-black rounded-full px-2 font-normal\">Skip</span> ᓈᓴᐅᓯᖅᑐᐃᒋᐊᓕᕐᓗᑎᑦ.<br><br>EarSketch is free to use under the terms of our <a href=\"https://earsketch.gatech.edu/landing/#/license\" target=\"_blank\" rel=\"noreferrer\">license agreement</a>.<br><br>ᐋᕿᒃᓯᒪᔪᐅᑕᖅ ᓈᓴᐅᓯᖅᑐᐃᓂᐊᕐᓗᓐᓂ ᓴᑉᓱᒧᖓ ᐃᓕᓐᓂᐊᕈᒻᒧᑦ Python, ᓇᕿᓪᓗᒍ ᐊᑖᓐᓂ ᐊᓯᖑᕈᒪᒍᒃᓂ JavaScript.",
      "codeEditor": "ᓈᓴᐅᑎᑦ ᓇᓗᓇᐃᑯᑕᑦ ᐱᓕᕆᔪᑎᒋᓂᐊᖅᑕᑦ ᓂᐱᓕᐅᕐᓂᐊᓗᕐᑎᑦ. ᑎᑎᖃᓐᓂᒃ ᐊᑐᖅᑐᖅ ᓈᓴᐅᑎᖃᖅᑐᓐᓂᒃ.",
      "runCode": "ᓈᓴᐅᑎᑦ ᖃᐅᔨᓴᕐᓗᒋᑦ ᓂᐱᖑᕐᓂᐊᕐᓂᖏᓐᓂᒃ. ᓇᕿᓪᓗᒍ <span class=\"font-black text-green-600 text-2xl\"><i class=\"align-middle icon icon-arrow-right22\"></i>RUN</span> ᓇᕿᑕᕈᑎᖓ ᑕᑯᒋᐊᕐᓗᒍ ᓈᓴᐅᑎᖓ ᓈᓴᐅᑎᑎᒍᑦ ᓂᐱᓕᐅᕈᑎᑉ ᐱᓕᕆᔪᑎᖓᓐᓂ ᖁᓚᓂᓯᐅᖅᑐᖅ ᓴᓇᐅᑎᑦ ᐊᕿᒃᓱᕈᑎᖏᓐᓂ.",
      "previewMusic": "ᓈᓴᐅᑎᑎᒍᑦ ᓂᐱᓕᐅᕈᑎᑉ ᐱᓕᕆᔪᑎᖓ (DAW) ᑕᑭᓂᖏᓐᓂᒃ ᖃᐅᔨᓴᐅᑎᓕᒃ ᓈᓴᐅᑎᓐᓂᒃ ᓯᑲᓐᓂᒃ ᐊᒪ ᑕᑭᓂᖏᓐᓂᒃ ᐆᒃᑐᕋᐅᑎᓕᒃ. ᐊᑕᓐᓂ ᓂᐱᓕᐅᕐᓂᐅᑉ ᐃᓚᓯᒪᔪᑦ ᐃᒻᖏᐅᑎᖏᓐᓄᑦ ᓂᐱᓕᐅᖅᓯᒪᔪᑉᓗ ᓇᓂᓯᐅᓕᕐᓂᖓᓐᓂᒃ.",
      "playMusic": "ᓇᕿᑲᕈᑎᖏ ᖁᓚᓐᓂ ᑕᓕᖅᐱᐊᓐᓂ DAW ᐊᐅᓚᔪᑕᐅᔪᑦ ᑐᓵᓂᐊᕐᓗᓐᓂ ᓂᐱᒻᒥᒃ. ᑐᓵᔪᓪᓗᐊᖅᐸᑎᑦ ᓴᕿᓪᓗᒍ ᑯᕇᓐ ᐃᖅᑐᐊᖅᑐᖅ <span class=\"align-middle icon icon-play4 text-green-600 text-2xl\"></span>.",
      "exploreCode": "ᓴᐅᒥᐊᓐᓂ ᑕᑯᔪᑎᑉ ᐊᓯᖏᓐᓂᒃ ᑕᑯᔪᒪᓐᓂᕈᕕᑦ. ᓇᕿᓪᓗᒍ ᐅᐊᔪᑎᖓ ᖁᓚᓐᓂ ᒪᐃᑐᕈᒪᒍᖕᓂ/ᒪᑐᔪᒪᒍᖕᓂ. ᐊᑕᐅᓯᐅᖏᑐᒻᒥᒃ ᑕᑯᔪᑎᑕᓕᒃ, ᑕᑉᑯᐊ ᑕᑯᒋᐊᕐᓂᐊᖅᐸᕗᑦ.",
      "addSounds": "ᓯᕗᓪᓕᖅ ᑕᑯᔪᑕᐅᔪᖅ ᐅᓇᐅᑉᓗᓐᓂ <span class=\"text-yellow-500 text-3xl align-middle icon icon-headphones\"></span> SOUNDS. ᑕᑯᕙᓕᐊᓗᒍ ᓇᕿᓪᓗᒍᓗ ᑐᖁᕈᑎᖏᑦ ᐃᓗᓕᖃᖅᑐᑦ 4,000+ ᓂᐱᓐᓂᒃ ᐊᑐᕈᖕᓇᖅᑕᕐᓂᒃ ᓂᐱᓕᐅᖅᑕᕕᑦ, ᓇᓴᔭᐅᓐᓂᑯᑦ ᖃᐅᔨᒪᔭᐅᑎᐊᖅᑐᓐᓄᑦ ᐃᒻᖏᐅᓯᐅᖅᑎᓐᓄᑦ.",
      "saveCode": "ᐊᓯᐅᑕᐃᓕᔪᒻᒧᑦ ᓈᓴᐅᑎᑦ ᐃᓕᔭᐅᔪᖅ ᐅᕗᖓ <span class=\"text-yellow-500 text-3xl align-middle icon icon-embed2\"></span> SCRIPTS. ᕿᓂᕈᖕᓇᖅᐳᑎᑦ ᑎᑎᖃᓐᓂᒃ ᐅᖃᕆᐊᓕᖕᓂᒃ ᐅᑉᓗᖓᓐᓂᒃ, ᐅᖃᐅᓯᖓᓐᓂᒃ ᐊᒻᒪ ᓇᖕᒥᓂᖃᖅᑐᒻᒥᒃ.",
      "readCurriculum": "ᑕᓕᖅᐱᐊᓐᓂ ᐃᓕᓂᐊᕈᑎᑦ ᐊᐅᓚᔪᑎᖏᑦ. ᐅᐊᔪᑎᖓ ᐊᑐᕐᓗᒍ ᑕᑯᔪᒪᒍᕕᑦ ᐃᓕᓂᐊᕈᑎᓐᓂᒃ ᐊᒪ ᑐᖓᓱᖁᔨᔪᒻᒥᒃ ᐃᓗᓕᖏᓐᓂᒃ ᑕᑯᓂᐊᕐᓗᓐᓂ.",
      "end": "ᖁᕕᐊᓱᒃᐳᒍᑦ! ᐃᓕᓐᓂᐊᕈᑦ ᐱᐊᓂᒃᑲᖕᓂ. ᓂᐱᒻᒥᒃ ᓴᓇᔪᖕᓇᖅᓯᒪᕗᑎᑦ. ᓇᕿᓪᓗᒍ <span class=\"align-middle icon icon-plus2\"></span> ᐅᑯᐃᕈᒪᒍᖕᓂ ᓄᑕᒻᒥᒃ ᓴᓇᓗᑎᑦ ᑎᑎᖃᒻᒥᒃ ᐅᖃᕆᐊᓕᖕᒥᒃ ᓈᓴᐅᑎᖏᓐᓂᒃ."
    }
  },
  "messages": {
    "confirm": {
      "deletescript": "ᓄᖑᑎᖅᓯᒪᔪᑦ ᑎᑎᖃᑦ ᐅᕙᖓᑦ Scripts ᑎᑎᖃᖏᓐᓂᑦ ᐅᑎᖅᑎᑕᐅᔪᓪᓗᐊᖅᐳᑦ ᐅᕙᖓᑦ \"Deleted Scripts\".",
      "deleteSharedScript": "ᓄᖑᑎᕈᒪᒍᖕᓂ ᐊᒥᖃᓚᐅᒃᑲᑦ ᑎᑎᖃᖅ ᐊᖃᕆᐊᓕᒃ \"{{scriptName}}\"?",
      "deleteSound": "ᓂᐱᓕᐅᖅᑕᐃᑦ ᓄᖑᑎᕈᒪᕕᐅᒃ {{soundName}}",
      "leaveCollaboration": "ᕿᒪᓚᐅᖅᐱᐅᒃ ᐱᓕᕆᖃᑎᒌᖕᓂᖅ  ᐃᑯᒪᑐᐃᓐᓇᖅᐱᐅᒃ \"{{scriptName}}\"?"
    },
    "interpreter": {
      "runSuccess": "ᑎᑎᖃᖅ ᐅᖃᕆᐊᓕᒃ ᑲᔪᓯᑎᐊᖅᑐᖅ! ᓇᕿᓪᓗᒍ ᑐᓵᔪᒪᓐᓂᕈᖕᓂ ᓂᐱᓕᐅᖅᑕᐃᑦ.",
      "runFailed": "ᐊᑕᐅᓯᕐᒥᒃ ᐅᖓᑕᓂᓗ ᑕᒻᒪᖅᓯᒪᔪᖅᑕᓕᒃ ᑎᑎᖃᒻᒥ ᐅᖃᕆᐊᓕᖕᒥ. ᑕᑯᓗᒋᑦ ᓈᓴᐅᑎᖏᑦ ᓱᓇᐅᓂᖓᓐᓂᒃ.",
      "noimport": " ᑐᑭᓕᐅᒐᐅᓯᒪᖏᑐᖅ. ᐃᒻᒪᖄ \"ᐅᕙᖓᑦ ᓯᐅᑎᒃᑯᑦ ᑐᓵᔭᒃᓴᒻᒥᑦ *\" ᐊᓯᐊᐅᓯᒪᖕᒪᑦ."
    },
    "dawservice": {
      "effecttrackwarning": "ᐃᓚᓯᓂᖅ ᓂᐱᓕᐅᖅᓯᒪᔪᒻᒧᑦ ᓯᕗᓂᖓᓂ ᓂᐱᓕᐅᒐᐅᓂᖓᑕ"
    },
    "esaudio": {
      "stringindex": "ᑎᒡᓕᖅᑕᕐᓂᖓ ᓯᓚᑕᐅᑎᓯᒪᔪᖅ",
      "nonlistRangeError": "ᓂᐱᖏᑦᑕ ᐊᔨᒌᖏᓐᓂᖏᑦ ᑭᓯᒻᒥᒃ ᐊᑐᖅᑕᖅᐳᑦ 0, +, or -",
      "tempoRange": " ᓂᐱᖓᑕ ᓇᑭᕐᓂᖓ ᐊᑯᓂᖓᓐᓂ 45 bpm ᐊᒻᒪ 220 bpm",
      "analysisTimeTooShort": "ᖃᐅᔨᓴᕐᓂᐅᑉ ᐊᑯᓂᐅᑎᒋᓂᖓ (ᐃᓱᓕᑉᕕᖓ − ᐱᒋᐊᕐᕕᖓ) ᒥᑭᓗᐊᖅᑐᖅ"
    },
    "user": {
      "scriptcloud": "ᐅᖃᒐᒃᓴᑉ ᑎᑎᖃᖓ ᐊᑐᐃᓐᓇᐅᓂᐊᓕᕐᓗᓐᓂ ᐃᓕᔭᐅᓯᒪᓕᖅᐳᖅ ᑲᓚᐅᑦ ᑐᖁᖅᑕᕐᕕᖓᓐᓄᑦ.",
      "allscriptscloud": "ᑕᒪᕐᒥᒃ ᐊᓯᐅᑕᐃᓕᔪᑎᖃᖏᑐᑦ ᐃᓕᔭᐅᓯᒪᓕᖅᐳᑦ ᑲᓚᐅᑦ ᑐᖁᐃᕕᖓᓐᓄᑦ.",
      "badsharelink": "ᑕᒻᒫᔭᕐᓂᕋᖅᑐᖅ ᐅᒃᑯᐃᕐᓂᖕᓂᐊᕐᓗᓐᓂ ᑎᑎᖃᒻᒥᒃ ᐅᖃᒐᒃᓴᒻᒥᒃ. ᖃᕆᑕᐅᔭᒻᒥ ᑎᑎᕋᖅᓯᒪᓂᖓ ᑕᒻᒫᔭᖅᓯᒪᓇᕐᓕᐊᖅ.",
      "scriptcopied": "ᑎᑎᖃᖅ ᐅᖃᒐᒃᓴᑦ ᐊᔪᕈᑎᖃᕐᖏᓗᓐᓂ ᐊᔪᖃᖅᓯᔭᐅᕗᖅ.",
      "emailConflict": "ᓄᑕᖑᖅᑎᖏᑐᖅ ᐊᑐᖅᑎᐅᔪᑉ ᐃᑎᕈᑎᖓ. ᑎᑎᖃᑎᑦ ᖃᐅᔨᒋᐊᓗᒋᑦ ᐊᑐᒐᐅᖏᒪᖔᑦ ᐊᑎᖏᓐᓄᑦ EarSketch ᐃᑎᕈᖕᓇᐅᒻᒧᑦ. (ᐅᓇᑐᑦ: ᐊᐅᓚᔨᖏᑯᕕᑦ ᐊᑐᕈᓇᐅᑎᖃᖅᑐᒻᒥᒃ, ᖃᕆᑕᐅᔭᐃᑦ ᓄᖃᓚᐅᕐᓗᒍ ᐊᒪ ᐱᒋᐊᓕᓵᕐᓗᑎᑦ  -> ᐳᐃᒍᖅᐱᐅᒃ ᑭᓯᕕᑦ ᐃᑎᕈᖕᓇᐅᑎᖓ? ᐊᑐᒐᐅᔪᓪᓗᐊᖅᑐᖅ. ᖃᕆᑕᐅᔭᑯᑦ ᑎᑎᖃᓂᒃ ᑕᑯᔪᑎᑦ ᐊᑐᕐᓗᒍ."
    },
    "download": {
      "script": "ᓇᓗᓇᐃᑯᑕᓕᐊᑦ ᑎᑎᖃᑦ ᐃᓚᖓᓐᓄᑦ ᐊᓯᐊᑕᐃᓕᔪᑎᓕᐅᕐᓗᒍ ᐃᑭᐊᖅᓯᕕᖕᓄᑦ.",
      "wav": "ᐊᓯᐊᑕᐃᓕᔪᑎᖓ ᐃᒻᖏᐅᑎᓕᐊᖅᐱᑦ ᑭᖑᓪᓕᖃᕐᓗᒍ WAV ᓂᐱᖓ (ᐊᖏᓂᖅᓴᒻᒥᒃ ᐊᑐᕐᓂᐊᕐᒪᑦ, ᐊᒻᒪ ᓂᐱᖓ ᑐᓴᕐᓂᕐᓂᖅᓴᐅᓂᐊᕐᓗᓐᓂ).",
      "mp3": "ᐊᓯᐊᑕᐃᓕᔪᑎᓕᐅᕐᓗᒍ ᐃᒻᖏᐅᑎᓕᐊᑦ ᑭᖑᓪᓕᖓ MP3 ᖑᓗᒍ (ᐃᓂᑭᓐᓂᖅᓴᒻᒥᒃ ᐊᑐᓱᖅᑐᖅ, ᑭᓯᐊᓐᓂ ᓂᐱᖓ ᐱᐅᓗᐊᖏᑐᖅ).",
      "multitrack": "ᓂᐱᓕᐅᖅᓯᒪᔪᖅ ᐊᓯᐊᖑᓐᓂᒃ ᐊᑎᖅᑖᕐᓗᒍ ᐊᕕᒃᓯᒪᓗᓐᓂ WAV ᑐᖁᐃᔪᑎᖓ (ᐊᓯᐊᓐᓂᒃ ᖃᕆᓴᐅᔭᒻᒥ ᓂᐱᓕᐅᕈᒻᒥᒃ ᐅᑯᓂᖓ GarageBand, Logic, Pro Tools, Reaper, FruityLoops, Cubase, Audition, ᐅᕙᓗᓂᑦ Live).",
      "compileerror": "ᑎᑎᖃᑦ ᐅᖃᕆᐊᓖᑦ ᐱᐊᓂᒃᓯᒪᑎᐊᖏᑐᑦ.",
      "emptyerror": "ᐃᒻᖏᐅᑎᖓ ᐱᑕᖃᖏᑐᖅ!",
      "rendererror": "ᐅᖃᕆᐊᓖᒃ ᑎᑎᖃᖅ ᐱᐊᓂᑎᐊᖅᓯᒪᖏᖢᓐᓂ ᐊᓯᐊᑕᐃᓕᔪᒻᒧᑦ ᐃᓕᔭᐅᔪᖅ."
    },
    "changepassword": {
      "pwdauth": "ᓄᑕᐅᖏᑐᖅ ᐃᓯᕈᓐᓇᐅᑖ ᑕᒻᒫᔭᖅᓯᒪᔪᖅ. ᐃᓯᕈᖕᓇᐅᑎᖓ ᐊᓯᐊᖑᒐᐅᓂᖅ ᐊᔪᖅᑐᖅ.",
      "pwdfail": "ᐃᒡᕕᑦ ᐃᓯᕈᓐᓇᐅᑖ ᐊᔨᖏᖏᑕᖓ ᑎᑎᕋᓚᐅᑲᖅᐱᑦ ᐃᓯᕈᓐᓇᐅᑖ.",
      "pwdlength": "ᐃᕖᑦ ᐃᓯᕈᓐᓇᐅᑖ ᓇᓗᐊᖅᑐᖅ. ᐃᓯᕈᖕᓇᐅᑎᖓ ᑕᑭᓂᖃᕆᐊᓕᒃ 5−ᓂᒃ ᑎᑎᖃᓐᓂᒃ.",
      "commerror": "ᑎᑎᖃᖓ ᑕᒻᒪᖅᓯᒪᔪᖅ ...",
      "commerror2": "ᑎᑎᖃᖓ ᑕᒻᒪᖅᓯᒪᔪᖅ ..."
    },
    "downloadprotecteddata": {
      "nopassword": "ᑭᓯᕕᑦ ᖃᐅᔨᒪᔭᖓ ᑎᑎᕋᕐᓗᒍ.",
      "servertimeout": "ᐊᔪᕈᑎᖃᖅᑐᖅ ᐃᓱᐊᓐᓂ. ᐆᒃᑐᑲᓐᓂᕐᓗᑎᑦ.",
      "unexpectederror": "ᓂᕆᐅᓇᖏᑐᒻᒥᒃ ᑕᒻᒪᖅᓯᒪᔪᖅ. ᐅᒃᑐᑲᓐᓂᕐᓗᑎᑦ ᐊᓯᖏᓐᓂᒃ ᑕᑯᔪᑎᓐᓂᒃ."
    },
    "forgotpassword": {
      "fail": "ᖃᕆᑕᐅᔭᒥ ᑎᑎᖃᖁᑎᑦ ᐊᑐᖏᓕᖅᑐᖅ ᐃᓚᐅᖏᑐᕐᓘᓃᑦ EarSketch ᐃᑎᕈᖕᓇᐅᑎᖓᓐᓄᑦ.",
      "success": "ᑎᑎᖃᐅᑎᑎᑦ ᑕᑯᒋᐊᕐᓗᒋᑦ ᐅᑯᓇᖓᑦ EarSketch ᐃᑎᕈᖕᓇᐅᑏᑦ ᐋᕿᒋᐊᖃᕐᓂᖓᓐᓂᒃ."
    },
    "uploadcontroller": {
      "freesoundSelection": "ᓂᕈᐊᕐᓗᑎᑦ ᓂᐱᖓᓐᓂᒃ ᐅᕙᖓᑦ Freesound ᕿᓂᕈᑎᖓᓐᓂᑦ...",
      "userAuth": "ᐊᑐᖅᑎᓗᐊᕕᐅᖏᑐᖅ ...",
      "wavsel": "ᓂᕈᐊᕐᓗᑎᑦ ᐊᔪᖏᑐᒻᒥᒃ ᓂᐱᖓᑕ ᐃᓂᖃᕐᕕᖓᓐᓂᑦ ...",
      "invalidfile": " ᓂᐱᖏᖏᑕᖓ ᐃᓂᖃᕐᕕᖓᓐᓂ ...",
      "undefinedconstant": "ᑐᑭᖃᑎᐊᖏᑐᖅ ᐊᑐᒐᐅᓱᐊᖅᑐᖅ...",
      "alreadyused": " ᐊᑐᒐᐅᓯᒪᓕᐊᓂᒃᑐᖅ ᑕᒻᓇ",
      "invalidconstant": " ᐊᑐᕐᓂᖅ ᐊᔪᖅᑐᖅ ᐆᒃᑐᕋᐅᓂᓗᒃᑐᖅ...",
      "tempointeger": "ᓂᐱᖓᑕ ᓈᓴᐅᑎᖓ ᓈᒻᒪᒋᐊᓕᒃ...",
      "bigsize": " ᒪᒥᐊᓇᕋᓗᐊᖅᐳᖅ, ᓂᐱᖃᑕ ᐃᓂᖃᕐᕕᖓ ᑕᑭᓂᖃᕆᐊᓕᒃ 30 ᓯᑲᓐᔅ ᐅᑖᓂᐅᖏᑐᖅ.",
      "timeout": "ᓄᖃᖓᓚᐅᕐᓂᖓᓐᓄᑦ ᖃᕆᑕᐅᔭᒻᒥ ᐊᒧᓂᐊᕐᓗᒍ ᑕᒻᒪᖅᓯᒪᔪᖅ ...",
      "uploadsuccess": "ᑲᔪᓯᑎᐊᖅᑐᖅ ᐊᒧᓂᐊᕐᓂᖓ ᓂᐱᓕᐅᖅᓯᒪᔪᑉ",
      "commerror": "ᐊᒧᓂᐊᕐᓗᒍ ᓂᐱᓕᐅᖅᓯᒪᔪᖅ ᑕᒻᒪᖅᓯᒪᔪᖅ ...",
      "commerror2": "ᐊᒧᕙᓕᐊᓂᖓ ᓂᐱᓕᐅᖅᓯᒪᔪᑉ ᑕᒻᒪᖅᓯᒪᔪᖅ ...",
      "chrome_mic_noaccess": "ᐅᖃᕐᕕᖓᓐᓂᒃ ᐊᔪᓕᖅᑎᑦᓯᓯᓯᒪᕗᑎᑦ. ᐊᔪᕈᖕᓇᐃᑎᓪᓗᒍ ᓇᕿᖏᓪᓗᒍ 'i' ᖃᕆᑕᐅᔭᕐᓂ ᐊᒻᒪ ᓂᕈᐊᕐᓗᒍ 'ᐊᔪᖏᑎᑦᓯᓂᖅ' ᓂᐱᖃᕈᑎᑉ ᓴᓂᐊᓐᓂ. ᐆᒃᑐᑲᓐᓂᕐᓗᒍ.",
      "ff_mic_noaccess": "ᐅᖃᕐᕕᖓᓐᓂᒃ ᐊᔪᓕᖅᑎᑦᓯᓯᓯᒪᕗᑎᑦ. ᐊᔪᕈᖕᓇᐃᑎᓪᓗᒍ ᓇᕿᖏᓪᓗᒍ 'i' ᖃᕆᑕᐅᔭᕐᓂ ᐊᒻᒪ ᓂᕈᐊᕐᓗᒍ 'ᐊᔪᖏᑎᑦᓯᓂᖅ' ᓂᐱᖃᕈᑎᑉ ᓴᓂᐊᓐᓂ. ᐆᒃᑐᑲᓐᓂᕐᓗᒍ ᐊᑐᕐᓗᑎᑦ EarSketch.",
      "mic_noaccess": "ᓂᐱᖃᕈᑎᑦ ᐊᔪᓕᖅᑎᓯᒪᔭᑦ. ᓂᐱᓕᐅᕈᒪᒍᕕᑦ ᖃᕆᑕᐅᔭᒃᑯᑦ ᐊᔪᕈᖕᓇᐃᖅᑎᓪᓗᒍ, ᐊᒻᒪ ᐆᒃᑐᑲᓐᓂᕐᓗᑎᑦ."
    },
    "createaccount": {
      "pwdfail": "ᐃᑎᕈᑏᑦ ᖃᕆᑕᐅᔭᒻᒥ ᐊᓯᐊᖑᖕᒪᑦ ᓯᕗᓪᓕᕐᒥᒃ ᐊᑐᓚᐅᑲᕐᓂᑦ.",
      "useralreadyexists": "ᐊᔪᖏᔪᑏᑦ ᖃᕆᑕᐅᔭᑯᓪᓗ ᑎᑎᕋᕈᑎᕕᑦ ᐊᑎᖓ ᐊᑐᕐᓗᒍ ᑕᑯᔪᒪᓐᓂᕈᖕᓂ ᐊᔪᖏᔪᑏᑦ.",
      "commerror": "ᑐᓴᐅᒪᔪᑏᑦ ᐊᔪᓕᖅᓯᒪᔪᖅ  ...",
      "usernameconstraint": "ᐊᔪᖏᔪᑏᑦ ᓈᓴᐅᒻᒥᒃ ᐱᒋᐊᕐᕕᖃᕆᐊᖃᖏᓚᖅ, ᐊᒻᒪ ᐊᕕᒃᓯᒪᔪᖃᖏᓗᓐᓂ ᐊᓯᖏᓐᓂᒃᓗ ᑎᑎᖃᓐᓂᒃ ᐊᑐᖏᓗᓐᓂ"
    },
    "general": {
      "unauthenticated": "ᐃᑎᕈᒪᓐᓂᕈᕕ ᓯᕗᓪᓕᕐᒥᒃ ᐱᒋᐊᕈᑎᑦ ᐊᑐᕐᓗᒍ ᑭᓯᐊᓐᓂ...",
      "loginsuccess": "ᐃᑎᕈᖕᓇᓕᖅᐳᑎᑦ",
      "loginfailure": "ᓇᐃᑦᑐᖅ ᐊᑏᑦ ᐃᑎᕈᖕᓇᐅᑏᓪᓗ ᑕᒻᒪᖅᓯᒪᖕᒪᓂᒃ. ᐆᒃᑐᑲᓐᓂᕐᓗᑎᑦ ᓄᑖᒥᒡᓗ ᐃᑎᕈᖕᓇᐅᒻᒥᒃ ᓴᓇᓗᑎᑦ.",
      "complexitySyntaxError": "ᓈᓴᐅᑎᑦ ᐊᑐᕐᓂᖅ ᐊᔪᓕᖅᓯᒪᖕᒪᑕ, ᓱᓇᒥᑭᐊᖅ ᑎᑎᖃᒻᒥᒃ ᓈᓴᐅᒻᒥᒃᓘᕙ ᐃᓕᔭᕆᐊᖃᖏᑐᒻᒥᒃ ᐃᓕᓯᒪᔪᖅᑕᖃᕐᒪᑦ.",
      "soundrenamed": "ᑲᔪᓯᑎᐊᖅᑐᖅ ᐊᓯᐊᓐᓂᒃ ᐊᑎᖃᓕᕐᓗᓐᓂ ᓂᐱᖓ",
      "renameSoundEmpty": "ᓂᐱᖓᑕ ᐊᑎᖓ ᐃᓗᓕᖃᕆᐊᖃᖅᐳᖅ (ᐅᑯᓂᖓᓗᓐᓂᑦ ᑎᑎᕋᖅᓯᒪᓗᓐᓂ \"_\")!",
      "renameSoundSpecialChar": "ᐊᑎᖓᑕ ᐊᓯᐊᖑᕈᑎᖓᓐᓂ...",
      "renameSoundConflict": "ᓂᐱᐅᑉ ᐊᑎᖓ ᐊᑐᒐᐅᓕᐊᓂᒃᑐᖅ",
      "shortname": "ᐊᑎᖃᕐᓗᓐᓂ ᑲᑭᓂᖃᖅᑐᒻᒥᒃ 3 ᑎᑎᖃᓐᓂᒃ.",
      "illegalCharacterInUserID": "ᑎᑎᖃᓐᓂ ᑭᓯᐊᓐᓂ ᐊᑐᕐᓗᑎᑦ, ᓈᓴᐅᑎᓐᓂᒃ ᐅᕙᓘᓃᑦ _ ᐊᑐᕐᓂᐊᖅᑐᑉ ᓇᓗᓇᐃᑯᑕᖓᓐᓄᑦ.",
      "userDoesNotExist": "ᐊᑐᕐᓂᐊᖅᑐᑉ ᓇᓗᓇᐃᑯᑕᖓ ᐱᑕᖃᖏᑐᖅ.",
      "noSelfShare": "ᐃᓕᖕᓂᒃ ᐊᒥᖄᖃᑎᖃᕐᓂᖅ ᐅᖃᒐᒃᓴᓐᓂᒃ ᑎᑎᖃᓐᓂᒃ ᐊᔪᖅᑐᑎᑦ!"
    },
    "idecontroller": {
      "running": "ᐃᖏᕋᔪᑦ ᑎᑎᖃᑦ ᐅᖃᒐᒃᓴᑦ...",
      "success": "ᑎᑎᖃᑦ ᐅᖃᒐᒃᓴᑦ ᑲᔪᓯᑎᐊᖅᐳᑦ",
      "overwrite": "ᐊᑎᖅ ᐊᑐᒐᐅᓕᐊᓂᒃᑐᖅ. ᐊᓯᐊᓂᒃ ᐊᑐᕐᓂᐊᖅᐳᑎᑦ ᑭᓯᕕᑦ ᖃᐅᔨᒪᔭᖓᓐᓂᒃ ᓄᑕᒻᒥᒃ ᑎᑎᖃᖅ ᐅᖃᕆᐊᓕᐅᑉ ᐊᑎᒃᓴᖓᓐᓂᒃ.",
      "overwriteDeleted": "That name already exists in your deleted scripts. Please provide a unique name or restore the deleted script and rename it.",
      "illegalname": "ᐊᑐᕐᓗᑎᑦ ᑎᑎᕋᒥᐊᓂᒃ, ᓈᓴᐅᑎᓐᓂᒃ, ᐅᕙᓘᓃᑦ _ ᑐᖁᕆᐊᓕᐅᑉ ᐊᑎᒃᓴᖓᓐᓄᑦ.",
      "savefailed": "ᑎᑎᖃᖅ ᐅᖃᕆᐊᓕᒃ ᑲᓚᐅᑦᒧᑦ ᐃᓕᓂᖅ ᐊᔪᖅᑐᖅ. ᑭᓯᐊᓐᓂ ᐅᖃᕆᐊᓕᒃ ᓄᖑᑕᐃᓕᔪᑎᑕᖓᑕ ᖃᕆᑕᐅᔭᖅ ᓯᓚᑰᖏᓗᒍ ᐊᔪᖏᐳᑎᑦ.",
      "blocksError": "Could not enter blocks mode: {{error}}",
      "saveallfailed": "ᐃᓚᖏᑦ ᑎᑎᖃᑦ ᐅᖃᕆᐊᓖᑦ ᑲᓚᐅᑦᒧᑦ ᐃᓕᓂᖅ ᐊᔪᖅᑐᑦ, ᑭᓯᐊᓐᓂ ᖃᕆᑕᐅᔭᖅ ᓯᓚᑰᖏᓗᒍ ᐊᔪᖏᑐᑦ ᐊᓯᐊᑕᐃᓕᔪᑎᖓ ᐃᓕᓂᐊᕐᓗᒍ.",
      "closealltabs": "ᒪᑐᐃᓯᒪᔪᖅ ᑕᒪᕐᒥᒃ ᒪᑐᓂᐊᖅᐳᑦ. ᓈᒻᒪᒃᓴᖅᐱᑦ ᑲᔪᓯᒥᐊᕐᓗᑎᑦ?"
    },
    "shareScript": {
      "menuDescriptions": {
        "viewOnly": "ᑎᑎᖃᖅ ᐅᖃᕆᐊᓕᒃ ᑕᑯᔭᐅᖁᕙᕋ (ᐋᕿᒃᓱᕐᓂᖅ ᐊᔪᖅᑐᑦ)",
        "collaboration": "ᐋᕿᒃᓱᒐᐅᖁᒐᓗᐊᖅᐸᕋ ᑭᓇᒧᒃᑭᐊᖅ ᑎᑎᖃᖅ ᐅᖃᕆᐊᓕᒃ.",
        "embedded": "ᖃᕆᑕᐅᔭᒻᒧᑦ ᐃᓕᔪᒪᕙᕋ ᐃᒻᖏᐅᑎᓕᐊᕋ."
      },
      "sharedViewOnly": "ᐊᒥᖄᖃᑎᖃᕐᓂᖅ {{scriptName}} ᑕᑯᑐᐃᓐᓇᕐᓗᒍ ᐋᕿᒐᐅᓯᒪᔪᖅ ᐅᑯᓄᒐ  "
    }
  },
  "api": {
    "noparams": "ᑭᒡᓕᓕᕕᖃᖏᑐᖅ",
    "parameters": "ᑭᒡᓕᓕᕕᖏᑦ",
    "returnValue": "ᐅᑎᖅᑎᑕᐅᓂᖓ ᐊᑭᑐᓂᖓᑕ",
    "pasteToCodeEditor": "Paste {{name}} function into code editor",
    "example": "ᐆᒃᑐᕋᐅᑦ",
    "defaultValue": "ᐋᕿᐊᑕᖅᓯᒪᔪᖅ ᐃᓕᖁᓯᖓ",
    "open": "ᒪᑐᐃᕐᓗᒍ",
    "close": "ᒪᑐᓗᒍ",
    "types": {
      "soundConstant": "ᓂᐱᖓ ᑲᔪᓰᓐᓇᖅᑐᖅ ",
      "analysisConstant": "ᖃᐅᔨᓴᕐᓂᖅ ᑲᔪᓰᓐᓇᖅᑐᖅ ",
      "folderConstant": "ᑕᖁᐃᕕᒃ ᑲᔪᓰᓐᓇᖅᑐᖅ ",
      "effectConstant": "ᐊᒃᑐᐃᓂᖓᓐᓄᑦ ᑲᔪᓰᓐᓇᖅᑐᖅ",
      "effectParameterConstant": "ᐊᒃᑐᐃᓂᖏᑦ ᑭᒡᓕᖃᕐᕕᖏᑕ ᑲᔪᓰᓐᓇᖅᑐᖅ ",
      "float": "ᐳᒃᑕᓛᑉᓗᓂ",
      "floatOptional": "Float, Optional",
      "array": "ᑲᑎᖅᓱᐊᑦ",
      "integer": "ᓈᓴᐅᑎᖓ",
      "integerOptional": "Integer, Optional",
      "listArray": "ᑎᑎᖃᑦ/ᑲᑎᖅᓱᐊᑦ",
      "list": "ᑎᑎᖃᑦ",
      "string": "ᐊᒃᖢᓇᐅᔭᖅ",
      "stringOptional": "ᐊᒃᖢᓇᐅᔭᖅ, ᐊᑐᕈᖕᓇᖅᑐᖅ",
      "stringNumberList": "ᐊᒃᖢᓇᐅᔭᖅ/ᓈᓴᐅᑎᖓ/ᑎᑎᖃᖏᑦ",
      "any": "Any type",
      "booleanOptional": "Boolean, ᐊᑐᕈᖕᓇᖅᑐᖅ",
      "soundOrList": "ᓂᐱᖓ ᑲᔪᓰᓐᓇᖅᑐᖅ ᐅᕙᓘᓃᑦ ᑎᑎᖃᖏ/ᑲᑎᖅᓱᐊᑦ"
    },
    "analyze": {
      "description": "ᑕᒻᓇ ᐊᑐᒐᐅᓱᖅᑐᖅ ᖃᐅᔨᓴᕐᓂᐊᕐᓗᓐᓂ ᓂᐱᐅᑉ ᑐᖁᕈᑎᖓᓐᓂᒃ ᓇᓗᓇᐃᖅᑕᐅᓯᒪᔪᒻᒥᒃ.",
      "parameters": {
        "sound": {
          "description": "ᓂᐱᐅᑉ ᑐᖁᐃᔪᑎᖓ ᖃᐅᔨᓴᕆᐊᓕᒃ, ᑕᒻᓇᐅᑉᓗᓐᓂ ᑲᔪᓰᓐᓇᖅᑐᖅ ᓂᐱᓐᓂᒃ ᑐᓵᔪᑎᖓ ᖃᕆᑕᐅᔭᒻᒥ."
        },
        "feature": {
          "description": "ᖃᐅᔨᓴᕐᓂᖅ ᑲᔪᓰᓐᓇᖅᑐᖅ. ᒪᕈᖕᓂᒃ ᐃᑲᔪᖅᐸᒃᐳᖅ ᖃᐅᔨᓴᕐᓂᐅᑉ ᐃᓕᖁᓯᖓ:  RMS_AMPLITUDE ᖃᐅᔨᓴᖅᐸᒃᐳᖅ ᓂᐱᖁᖅᑐᓂᖓᓐᓂᒃ ᐊᒻᒪ SPECTRAL_CENTROID ᖃᐅᔨᓴᖅᐸᒃᖢᓐᓂ ᖃᐅᒻᒪᓂᖓᓐᓂᒃ."
        }
      },
      "returns": {
        "description": "ᖃᐅᔨᓴᕐᓂᑯ ᓇᓗᓇᐃᒐᐅᓯᒪᔪᒻᒥᒃ ᖃᓄᐃᑑᓂᖓᓐᓂᒃ (ᑖᒻᓇᖃᑦᑖᖅ ᐊᑯᓂᖓᓂ 0 ᐊᒻᒪ 1 ᐃᓚᐅᑉᓗᓂ)."
      },
      "example": {
        "python": "# Spectral centroid of a sound\ncentroid = analyze(HOUSE_BREAKBEAT_001, SPECTRAL_CENTROID)",
        "javascript": "// Spectral centroid of a sound\nvar centroid = analyze(HOUSE_BREAKBEAT_001, SPECTRAL_CENTROID);"
      }
    },
    "analyzeForTime": {
      "description": "ᐊᑐᓱᖅᑐᖅ ᖃᐅᔨᓴᕐᓂᐊᕐᓗᓐᓂ ᓂᐱᖓᓐᓂᒃ ᓇᓗᓇᐃᖅᓯᒪᔪᒻᒥᒃ ᐃᓕᖁᓯᖓᓐᓂᒃ, ᐱᒋᐊᕐᕕᖓᓐᓂᑦ ᐊᒪ ᐃᓱᓕᑉᕕᖓᓐᓄᑦ ᖃᑉᓯᐅᓂᖏᓐᓂᒃ.",
      "parameters": {
        "sound": {
          "description": "ᓂᐱᐅᑉ ᑐᖁᐃᔪᑎᖓ ᖃᐅᔨᓴᕆᐊᓕᒃ, ᑕᒻᓇᐅᑉᓗᓐᓂ ᑲᔪᓰᓐᓇᖅᑐᖅ ᓂᐱᓐᓂᒃ ᑐᓵᔪᑎᖓ ᖃᕆᑕᐅᔭᒻᒥ."
        },
        "feature": {
          "description": "ᖃᐅᔨᓴᕐᓂᖅ ᑲᔪᓰᓐᓇᖅᑐᖅ. ᒪᕈᖕᓂᒃ ᐃᑲᔪᖅᐸᒃᐳᖅ ᖃᐅᔨᓴᕐᓂᐅᑉ ᐃᓕᖁᓯᖓ:  RMS_AMPLITUDE ᖃᐅᔨᓴᖅᐸᒃᐳᖅ ᓂᐱᖁᖅᑐᓂᖓᓐᓂᒃ ᐊᒻᒪ SPECTRAL_CENTROID ᖃᐅᔨᓴᖅᐸᒃᖢᓐᓂ ᖃᐅᒻᒪᓂᖓᓐᓂᒃ."
        },
        "sliceStart": {
          "description": "Start location within the sound to begin analysis"
        },
        "sliceEnd": {
          "description": "End location within the sound to end analysis"
        }
      },
      "returns": {
        "description": "ᖃᐅᔨᓐᓂᑯ ᓇᓗᓇᐃᒐᐅᓯᒪᔪᑉ ᐃᓕᖁᓯᖓᓐᓂᒃ (ᐊᑯᓂᖓᓐᓂ 0 ᐊᒻᒪ 1 ᐃᓚᐅᑉᓗᓐᓂ)."
      },
      "example": {
        "python": "# Spectral centroid for part of a sound\nsound = HOUSE_BREAKBEAT_001\ncentroid = analyzeForTime(sound, SPECTRAL_CENTROID, 1.25, 1.5)",
        "javascript": "// Spectral centroid for part of a sound\nvar sound = HOUSE_BREAKBEAT_001;\nvar centroid = analyzeForTime(sound, SPECTRAL_CENTROID, 1.25, 1.5);"
      }
    },
    "analyzeTrack": {
      "description": "ᑕᒻᓇ ᖃᐅᔨᓴᖅᐸᒃᑐᖅ ᑕᒪᐃᓐᓂᒃ ᓂᐱᓕᐅᖅᓯᒪᔪᒻᒥᒃ ᓇᓗᓇᐃᖅᑕᐅᓯᒪᔪᒻᒥᒃ ᐃᓕᖁᓯᖓᓐᓂᒃ.",
      "parameters": {
        "track": {
          "description": "ᓂᐱᐅᑉ ᓈᓴᐅᑎᖓ ᖃᐅᔨᓴᕆᐊᓕᐅᑉ."
        },
        "feature": {
          "description": "ᖃᐅᔨᓴᕐᓂᖅ ᑲᔪᓰᓐᓇᖅᑐᖅ. ᒪᕈᖕᓂᒃ ᐃᑲᔪᖅᐸᒃᐳᖅ ᖃᐅᔨᓴᕐᓂᐅᑉ ᐃᓕᖁᓯᖓ:  RMS_AMPLITUDE ᖃᐅᔨᓴᖅᐸᒃᐳᖅ ᓂᐱᖁᖅᑐᓂᖓᓐᓂᒃ ᐊᒻᒪ SPECTRAL_CENTROID ᖃᐅᔨᓴᖅᐸᒃᖢᓐᓂ ᖃᐅᒻᒪᓂᖓᓐᓂᒃ."
        }
      },
      "returns": {
        "description": "ᖃᐅᔨᓐᓂᑯᑦ ᓇᓗᓇᐃᖅᓯᒪᔪᑉ ᓱᓇᐅᓂᖓᓐᓂᒃ  (ᐊᑯᓂᖓᓐᓂ 0 ᐊᒻᒪ 1 ᐃᓚᐅᑉᓗᓐᓂ)."
      },
      "example": {
        "python": "# Spectral centroid of a track\nfitMedia(HOUSE_BREAKBEAT_001, 1, 1, 3)\ncentroid = analyzeTrack(1, SPECTRAL_CENTROID)",
        "javascript": "// Spectral centroid of a track\nfitMedia(HOUSE_BREAKBEAT_001, 1, 1, 3);\nvar centroid = analyzeTrack(1, SPECTRAL_CENTROID);"
      }
    },
    "analyzeTrackForTime": {
      "description": "ᑕᒻᓇ ᖃᐅᔨᓴᕐᓂᖅ ᓂᐱᒻᒥᒃ ᓇᓗᓇᐃᖅᓯᒪᔪᒻᒥᒃ ᖃᐅᔨᓴᓱᖅᐳᖅ ᐱᒋᐊᕐᕕᖓᓐᓂ ᐊᒻᒪ ᐃᓱᐊᓐᓂᒃ ᑕᑭᓂᖓᓐᓂ.",
      "parameters": {
        "track": {
          "description": "ᓂᐱᐅᑉ ᓈᓴᐅᑎᖓ ᖃᐅᔨᓴᕆᐊᓕᐅᑉ."
        },
        "feature": {
          "description": "ᖃᐅᔨᓴᕐᓂᖅ ᑲᔪᓰᓐᓇᖅᑐᖅ. ᒪᕈᖕᓂᒃ ᐃᑲᔪᖅᐸᒃᐳᖅ ᖃᐅᔨᓴᕐᓂᐅᑉ ᐃᓕᖁᓯᖓ:  RMS_AMPLITUDE ᖃᐅᔨᓴᖅᐸᒃᐳᖅ ᓂᐱᖁᖅᑐᓂᖓᓐᓂᒃ ᐊᒻᒪ SPECTRAL_CENTROID ᖃᐅᔨᓴᖅᐸᒃᖢᓐᓂ ᖃᐅᒻᒪᓂᖓᓐᓂᒃ."
        },
        "start": {
          "description": "Start location within the track to begin analysis"
        },
        "end": {
          "description": "End location within the track to end analysis"
        }
      },
      "returns": {
        "description": "ᖃᐅᔨᓴᒐᐅᓂᖓᑕ ᖃᓄᐃᓐᓂᖓ ᓇᓗᓇᐃᖅᓯᒪᔪᑉ (ᐊᑯᓂᖓᓐᓂ 0 ᐊᒻᒪ 1 ᐃᓚᐅᑉᓗᓐᓂ)."
      },
      "example": {
        "python": "# Spectral centroid for part of a track\nfitMedia(HOUSE_BREAKBEAT_001, 1, 1, 3)\ncentroid = analyzeTrackForTime(1, SPECTRAL_CENTROID, 1.25, 1.5)",
        "javascript": "// Spectral centroid for part of a track\nfitMedia(HOUSE_BREAKBEAT_001, 1, 1, 3);\nvar centroid = analyzeTrackForTime(1, SPECTRAL_CENTROID, 1.25, 1.5);"
      }
    },
    "createAudioSlice": {
      "description": "ᓂᐱᒻᒥᒃ ᐅᑎᖅᑎᑦᓯᑉᓗᓐᓂ ᐊᕕᒃᓯᒪᓂᖓᑕ ᐊᑐᒐᐅᓚᐅᖅᑐᒻᒥᑦ ᓂᐱᓕᐅᕐᓂᑯᒻᒥᑦ.",
      "parameters": {
        "sound": {
          "description": "ᓂᐱᒻᒧᑦ ᑐᖁᐃᕕᒃ ᐱᒋᐊᕈᑎᖓᓐᓂᒃ ᐊᕕᒃᓯᒪᔪᒻᒥᒃ. ᑕᒻᓇ ᐊᑐᓱᖅᑐᖅ ᓂᐱᒻᒧᑦ ᖃᐅᔨᓴᕈᒻᒥᒃ ᖃᕆᑕᐅᔭᒻᒥ."
        },
        "sliceStart": {
          "description": "ᐱᒋᐊᕐᕕᖓ ᐊᕕᒃᓯᒪᔫᑉ."
        },
        "sliceEnd": {
          "description": "ᐃᓱᐊ ᐃᓂᖃᕐᕕᖓᑕ ᐊᕕᒃᓯᒪᔫᑉ."
        }
      },
      "returns": {
        "description": "ᓄᑕᖅ ᐊᕕᒃᓯᒪᔪᖅ ᐃᓚᖓᓐᓂᒃ ᐊᑐᖅᐸᒃᑐᖅ ᓂᐱᓕᐅᕈᑎᐅᑉ. "
      },
      "example": {
        "python": "# Extract part of a sound\nsound = HOUSE_BREAKBEAT_001\nslice = createAudioSlice(sound, 1.5, 2.5)\nfitMedia(slice, 1, 1, 3)",
        "javascript": "// Extract part of a sound\nvar sound = HOUSE_BREAKBEAT_001;\nvar slice = createAudioSlice(sound, 1.5, 2.5);\nfitMedia(slice, 1, 1, 3);"
      }
    },
    "createAudioStretch": {
      "description": "Returns a sound constant that represents a sound timestretched from its original tempo.",
      "parameters": {
        "sound": {
          "description": "The sound from which to create the timestretched sound. This is a constant from the sound browser."
        },
        "stretchFactor": {
          "description": "How much to timestretch the sound. Here \"2\" means \"twice as long\"."
        }
      },
      "returns": {
        "description": "A new sound constant representing the timestretched audio."
      },
      "example": {
        "python": "# Stretch the sound to be twice as long\nsound = RD_ROCK_POPRHYTHM_MAINDRUMS_4\nstretched = createAudioStretch(sound, 2)\nfitMedia(stretched, 1, 1, 9)",
        "javascript": "// Stretch the sound to be twice as long\nvar sound = RD_ROCK_POPRHYTHM_MAINDRUMS_4;\nvar stretched = createAudioStretch(sound, 2);\nfitMedia(stretched, 1, 1, 9);"
      }
    },
    "dur": {
      "description": "ᑕᑭᓂᖓ ᐅᑎᖅᑎᑕᐅᑉᓗᓐᓂ ᓂᐱᐅᑉ ᑐᖁᐃᔪᑎᖓ ᐆᒃᑐᕋᐅᑎᓐᓄᑦ.",
      "parameters": {
        "sound": {
          "description": "ᓂᐱᐅᑉ ᑐᖁᕐᕕᖓ ᑕᑭᓂᖓᑕ ᐃᓕᖁᓯᖓᓂᓯᐅᖅᐳᖅ. ᑕᒻᓇ ᖃᕆᑕᐅᔭᑯᑦ ᓂᐱᓐᓂᒃ ᐊᑐᕈᑎᓐᓂᒃ ᐊᑐᖅᐸᒃᑐᖅ."
        }
      },
      "returns": {
        "description": "ᐅᒃᑐᕋᐅᑎᑉ ᑕᑭᓂᖓ."
      },
      "example": {
        "python": "duration = dur(HOUSE_BREAKBEAT_001)",
        "javascript": "var duration = dur(HOUSE_BREAKBEAT_001);"
      }
    },
    "finish": {
      "description": "ᑕᒻᓇ ᐊᑎᖃᖅᑎᑕᕆᐊᖃᖅᐳᖅ ᐃᓱᐊᓐᓂ EarSketch ᑎᑎᖃᑦ ᐅᖃᕆᐊᖃᖅᑐᑦ. ᓂᐱᓕᐅᖅᓯᒪᔭᑦ ᐊᔪᖏᑎᐊᕐᓗᓐᓂ ᖃᕆᑕᐅᔭᒻᒥ ᓂᐱᓐᓂᒃ ᑐᓴᔪᒻᒥ (DAW).",
      "example": {
        "python": "# Rest of script above this line...\nfinish()",
        "javascript": "// Rest of script above this line...\nfinish();"
      }
    },
    "fitMedia": {
      "description": "ᐃᓚᓯᓱᖅᑐᖅ ᓂᐱᐅᑉ ᑐᖁᐃᕕᖓᓐᓂᒃ ᓂᐱᓕᐅᖅᓯᒪᔪᒻᒧᑦ ᐱᒋᐊᕐᕕᖃᖅᑐᒻᒥᒃ ᐊᒻᒪ ᐃᓱᓕᑉᕕᖃᖅᑐᒻᒥᒃ. ᓂᐱᐅᑉ ᑐᖁᖅᑐᐃᕕᖓ ᐊᑐᑲᓂᕐᓂᐊᖅᐳᖅ ᓄᖃᖅᑎᑕᐅᓗᓂᓗᓐᓂᑦ ᐃᓂᖃᑎᐊᖁᑉᓗᒍ ᑕᑭᓂᖓ.",
      "parameters": {
        "sound": {
          "description": "ᓂᐱᑉ ᑐᖁᖅᓯᒪᕕᖓ ᓂᐱᐅᕐᓂᑯᒻᒥ, ᐱᒋᐊᕐᕕᖃᓱᖅᑐᖅ ᖃᕆᑕᐅᔭᒥ ᓂᐱᓐᓂᒃ ᑐᓴᔾᔪᒥᑦ"
        },
        "track": {
          "description": "ᓂᐱᑉ ᓈᓴᐅᑎᖓ ᐃᓕᔭᐅᓗᓐᓂ ᓂᐱᐅᑉ ᑐᖁᖅᓯᒪᕕᖓ ᐃᓗᐊᓐᓂ"
        },
        "start": {
          "description": "Location within the track where the sound file will begin (e.g. 1 will start at the beginning of measure 1)."
        },
        "end": {
          "description": "Location within the track where the sound file will end (e.g. 5 will stop the sound file at the beginning of measure 5)."
        }
      },
      "example": {
        "python": "# Add a sound to a track, repeating or trimming as necessary\n# Here it repeats from measure 2 to the start of measure 9\nfitMedia(HIPHOP_FUNKBEAT_001, 1, 2, 9)",
        "javascript": "// Add a sound to a track, repeating or trimming as necessary\n// Here it repeats from measure 2 to the start of measure 9\nfitMedia(HIPHOP_FUNKBEAT_001, 1, 2, 9);"
      }
    },
    "importImage": {
      "description": "ᑕᒻᓇ ᐊᑐᒐᐅᓱᖅᑐᖅ ᐊᔨᒻᒥᒃ ᑕᑯᔪᒪᑉᓗᓐᓂ ᖃᕆᑕᐅᔭᒻᒥᑦ ᐊᒻᒪ ᒪᕈᐃᓕᖓᓕᕐᓗᒍ ᐊᕕᒃᓯᒪᓂᖓ/ᑎᑎᖃᖏᓪᓗ ᖃᑯᐊᖓᔪᖅ ᐅᕙᓗᓂᑦ ᐱᖓᓱᐃᓕᖓᓗᒍ ᑎᑎᕋᖅᓯᒪᓂᖏᑦ RGB ᑲᓚᖃᕐᓗᓐᓂ, ᐊᕿᒃᑕᐅᓯᒪᔪᖅ ᖃᑉᓯᐅᓂᖏᑦ ᐊᕙᓗᐃᑦ ᐊᒻᒪ ᑎᑯᓕᐊᖅᑐᑦ ᒪᓕᒡᓗᒋᑦ.",
      "parameters": {
        "url": {
          "description": "ᖃᕆᑕᐅᔭᒻᒥ ᑐᕌᕈᑎᖓ ᐊᔨᑉ ᓇᓂᓯᐅᕐᓂᖓᑕ"
        },
        "nrows": {
          "description": "ᖃᑉᓯᐅᓂᖏᑦ ᐊᕙᓗᐃᑦ ᐱᒃᓱ ᑎᑎᖃᖏᑕ ᐅᑎᕐᓂᐊᖅᑐᑦ (ᐊᖏᓂᖓ ᐋᕿᒐᐅᓂᐊᖅᐳᖅ ᑕᑉᑯᐊ ᐊᕙᓗᖏᑦ ᒪᓕᒡᓗᒋᑦ)"
        },
        "ncols": {
          "description": "ᐊᕕᒃᓯᒪᓂᖏ ᐱᒃᓱ ᐅᑎᕐᓂᐊᖅᑐᑦ (ᐊᔨ ᐊᖏᓂᖓ ᐋᕿᒐᐅᓂᐊᖅᐳᖅ ᑕᑉᑯᐊ ᐱᒃᓱ ᖃᑉᓯᐅᓂᖏᑦ ᒪᓕᒡᓗᒋᑦ)"
        },
        "includeRGB": {
          "default": "ᓱᓕᖏᑐᖅ",
          "description": "ᓱᓕᓐᓂᖏᐸᑦ ᒪᕈᐃᓕᖓᔪᖅ ᖃᑯᕐᓗᕿᓗᓐᓂ ᑎᑎᕋᖅᓯᒪᔪᖅ. ᓱᓕᓐᓂᖅᐸᑦ, ᐱᖓᓲᓕᖓᔪᖅ RGB ᑲᓚᖃᕐᓗᓐᓂ ᐱᒃᓱ ᐊᑎᖏᓐᓂ, ᐱᖓᔪᖓᑦ ᐅᑯᐊᖑᓗᑎᒃ R, G, ᐊᒻᒪ B, ᒪᓕᒃᑐᕋᐅᓪᓗᑎᒃ."
        }
      },
      "returns": {
        "description": "ᐊᑕᐅᓯᐅᖏᑐᒻᒥᒃ ᐃᓗᓕᖃᖅᑐᖅ ᐊᑎᖏᑦ ᐃᓗᓕᖏᑕ (0-255) ᐊᒥᓲᓂᖏ ᑕᐃᔭᐅᑉᓗᑎᒃ ᐱᒃᓱᓐᓂᒃ."
      },
      "example": {
        "python": "# Turn an image into a 10x10 grayscale list\nurl = \"https://cdn.pixabay.com/photo/2012/04/05/01/17/ear-25595_640.png\"\npixelData = importImage(url, 10, 10, False)",
        "javascript": "// Turn an image into a 10x10 grayscale list\nvar url = \"https://cdn.pixabay.com/photo/2012/04/05/01/17/ear-25595_640.png\";\nvar pixelData = importImage(url, 10, 10, false);"
      }
    },
    "importFile": {
      "description": "ᑕᒻᓇ ᐊᔪᖏᔪᑎᖓ ᑐᖁᖅᓯᒪᔪᑉ ᖃᕆᑕᐅᔭᒥ ᐊᒻᒪ ᐃᓗᓕᖏᑦ ᐊᒃᖢᓇᐅᔭᐅᑉᓗᑎᒃ.",
      "parameters": {
        "url": {
          "description": "ᖃᕆᑕᐅᔭᒻᒥ ᓇᓂᓯᐅᕐᓂᖓ ᑐᖁᖅᓯᒪᔪᖅ"
        }
      },
      "returns": {
        "description": "ᐃᓗᓕᖏ ᑐᖁᕐᓗᒋᑦ ᐊᒃᖢᓇᐅᔭᖅᑎᑐᑦ."
      },
      "example": {
        "python": "# Load a file via URL\nfileData = importFile(\"https://www.w3.org/TR/PNG/iso_8859-1.txt\")",
        "javascript": "// Load a file via URL\nvar fileData = importFile(\"https://www.w3.org/TR/PNG/iso_8859-1.txt\");"
      }
    },
    "init": {
      "description": "ᑕᒻᓇ ᓯᕗᓪᓕᐅᔭᕆᐊᓕᒃ ᑕᒪᐃᓐᓂ EarSketch ᐅᖃᒐᒃᓴᓐᓂ. ᐊᕿᒃᓱᐃᓱᕐᒪᑦ ᓂᐱᖓᓐᓂᒃ ᐱᓕᕆᑉᕕᖕᒥᒃ ᓴᓇᓂᐊᕐᓗᓐᓂ ᓂᐱᓕᐅᖅᓯᒪᔪᒻᒥᒃ.",
      "example": {
        "python": "init()\n# Rest of script below this line...",
        "javascript": "init();\n// Rest of script below this line..."
      }
    },
    "insertMedia": {
      "description": "ᐃᓕᓱᖅᑐᖅ ᑕᒪᕐᒥᒃ ᓂᐱᓐᓂᒃ ᑐᖁᕐᕕᖓᓐᓄᑦ ᓂᐱᓕᐅᖅᓯᒪᔪᒻᒧᑦ ᐱᒋᐊᕐᕕᖓᓐᓂᑦ ᓇᓗᓇᐃᖅᓯᒪᔪᒻᒥᑦ.",
      "parameters": {
        "sound": {
          "description": "ᓂᐱᖓᑕ ᑐᖁᕐᕕᖓ ᐃᓕᓐᓂᐊᕐᓗᒍ ᓂᐱᓕᐅᖅᓯᒪᔪᒻᒧᑦ, ᑕᒻᓇ ᐊᑐᒐᐅᓱᖅᑐᖅ ᓂᐱᐅᑉ ᑐᓵᔪᑎᖓᓐᓄᑦ ᖃᕆᑕᐅᔭᒻᒥ"
        },
        "track": {
          "description": "ᓂᐱᐅᑉ ᓈᓴᐅᑎᖓ ᐃᓕᓂᐊᕐᓗᒍ ᓂᐱᖓᑕ ᑐᖅᑯᖅᓯᒪᕝᕕᖓ ᐅᕗᖓ"
        },
        "start": {
          "description": "ᓇᓂᓯᐅᕐᓂᖓ ᐱᒋᐊᕐᕕᖓᑕ ᓂᐱᐅᑉ ᐅᕙᓐᓂ ᓂᐱᖓᑕ ᑐᖅᑯᖅᓯᒪᕝᕕᖓ. (The ᓂᐱᖓᑕ ᑐᖅᑯᖅᓯᒪᕝᕕᖓ ᑐᓵᓐᓇᕐᓂᐊᖅᑐᖅ ᐊᑕᐅᓰᕐᓗᓐᓂ, ᐃᓱᐊ ᖃᐅᔨᓐᓇᕐᓗᓐᓂ ᐊᑭᓂᖓ ᓂᐱᖓᑕ ᑐᖅᑯᖅᓯᒪᕝᕕᖓ.)"
        }
      },
      "example": {
        "python": "# Add a sound on track 1, measure 2, beat 3\ninsertMedia(HOUSE_BREAKBEAT_003, 1, 2.5)",
        "javascript": "// Add a sound on track 1, measure 2, beat 3\ninsertMedia(HOUSE_BREAKBEAT_003, 1, 2.5);"
      }
    },
    "insertMediaSection": {
      "description": "ᐃᓕᓱᖅᑐᖅ ᐃᓚᖓᓐᓂᒃ ᓂᐱᐅᑉ ᑐᖁᖅᑐᐃᕕᖓᓐᓄ ᓇᓗᓇᐃᖅᓯᒪᔪᒻᒧᑦ ᓇᓂᓯᐅᕐᓂᖓᓐᓂᒃ.",
      "parameters": {
        "sound": {
          "description": "ᓂᐱᖓᑕ ᑐᖁᕐᕕᖓ ᐃᓕᓐᓂᐊᕐᓗᒍ ᓂᐱᓕᐅᖅᓯᒪᔪᒻᒧᑦ, ᑕᒻᓇ ᐊᑐᒐᐅᓱᖅᑐᖅ ᓂᐱᐅᑉ ᑐᓵᔪᑎᖓᓐᓄᑦ ᖃᕆᑕᐅᔭᒻᒥ"
        },
        "track": {
          "description": "ᓂᐱᐅᑉ ᓈᓴᐅᑎᖓ ᐃᓕᓂᐊᕐᓗᒍ ᓂᐱᖓᑕ ᑐᖅᑯᖅᓯᒪᕝᕕᖓ ᐅᕗᖓ"
        },
        "start": {
          "description": "ᓇᓂᓯᐅᕐᓂᖓ ᐱᖑᐊᕐᕆᐊᕐᖃᕕᖓᑕ ᐅᕙᓐᓂ ᓂᐱᖓᑕ ᑐᖅᑯᖅᓯᒪᕝᕕᖓ."
        },
        "sliceStart": {
          "description": "ᓇᓂᓯᐅᕐᓂᖓᑕ ᐱᒋᐊᕐᕕᖓ ᐃᓗᐊᓐᓂ ᓂᐱᖓᑕ ᑐᖅᑯᖅᓯᒪᕝᕕᖓ ᐃᓚᖃᕐᓗᓐᓂ (ᐅᑯᐊᑐᑦ 1.0 ᐱᒋᐊᕈᑎᒋᓗᓂᐅᒃ ᓂᐱᖓᑕ ᑐᖅᑯᖅᓯᒪᕝᕕᖓ ᐊᒻᒪ 2.0 ᐆᒃᑐᕋᐅᑕᐅᓗᓐᓂ 2 ᐅᕙᓐᓂ ᓂᐱᖓᑕ ᑐᖅᑯᖅᓯᒪᕝᕕᖓ)."
        },
        "sliceEnd": {
          "description": "ᐃᓱᖓᑕ ᓇᓂᓯᐅᕐᓂᖓ ᓂᐱᖓᑕ ᑐᖅᑯᖅᓯᒪᕝᕕᖓ ᐃᓚᖃᕐᓗᓐᓂ (ᐅᑯᐊᑐᑦ 2.0 ᐆᒃᑐᕋᖅᓯᒪᑉᓗᓐᓂ 2 ᓂᐱᖓᑕ ᑐᖁᖅᓯᒪᑉᕕᖓᓐᓂ)."
        }
      },
      "example": {
        "python": "# Add part of a sound to a track\nsound = RD_UK_HOUSE_WURLITZER_3\ninsertMediaSection(sound, 1, 1.5, 2.5, 3.0)",
        "javascript": "// Add part of a sound to a track\nvar sound = RD_UK_HOUSE_WURLITZER_3;\ninsertMediaSection(sound, 1, 1.5, 2.5, 3.0);"
      }
    },
    "makeBeat1": {
      "description": "Creates a rhythmic pattern through specifying a string of characters. This string of characters can be of ANY length. We recommend choosing string lengths in multiples of 16 (e.g. 16, 32, 64, etc.), because this creates pattern lengths that are aligned with measures (each measure is 16 characters long).",
      "parameters": {
        "sound": {
          "description": "A single sound or a list/array of sounds. Typically this is a constant from the sound browser"
        },
        "track": {
          "description": "Track to place pattern onto"
        },
        "start": {
          "description": "Location within the track to start pattern (e.g. 1 will start at the beginning of measure 1)"
        },
        "beat": {
          "description": "A string indicating the rhythmic pattern to play. \"0\" plays the sound for a sixteenth note. \"+\" ties (i.e. continues or sustains) the sound for an additional sixteenth note. \"-\" rests (i.e. creates silence) for a sixteenth note. If the first argument to makeBeat is a list/array of sounds, \"0\" through \"9\" and \"A\" through \"F\" will play the sound at that list/array index for a sixteenth note."
        }
      },
      "example": {
        "python": "# Remix sounds into a new beat\ns = HIPHOP_FUNKBEAT_001\nmakeBeat(s, 1, 1, \"0++-0---0---0---\")\ns = [Y01_HI_HATS_1, Y01_OPEN_HI_HATS_1]\nmakeBeat(s, 2, 1, \"--10--10--100010\")",
        "javascript": "// Remix sounds into a new beat\nvar s1 = HIPHOP_FUNKBEAT_001;\nmakeBeat(s1, 1, 1, \"0++-0---0---0---\");\nvar s2 = [Y01_HI_HATS_1, Y01_OPEN_HI_HATS_1];\nmakeBeat(s2, 2, 1, \"--10--10--100010\");\n"
      }
    },
    "makeBeat2": {
      "description": "Creates a rhythmic pattern through specifying a string of characters. This string of characters can be of ANY length. We recommend choosing string lengths in multiples of 16 (e.g. 16, 32, 64, etc.), because this creates pattern lengths that are aligned with measures (each measure is 16 characters long).",
      "parameters": {
        "sound": {
          "description": "A single sound or a list/array of sounds. Typically this is a constant from the sound browser"
        },
        "track": {
          "description": "Track to place pattern onto"
        },
        "start": {
          "description": "Location within the track to start pattern (e.g. 1 will start at the beginning of measure 1)"
        },
        "beat": {
          "description": "A string indicating the rhythmic pattern to play. \"0\" plays the sound for a sixteenth note. \"+\" ties (i.e. continues or sustains) the sound for an additional sixteenth note. \"-\" rests (i.e. creates silence) for a sixteenth note. If the first argument to makeBeat is a list/array of sounds, \"0\" through \"9\" and \"A\" through \"F\" will play the sound at that list/array index for a sixteenth note."
        },
        "stepsPerMeasure": {
          "description": "A number that specifies the length of time for a single character in your beat string. The default value of 16 results in one sixteenth note."
        }
      },
      "example": {
        "python": "# Bongo triplets\nmakeBeat(IRCA_OS_BONGO_HIGH_OPEN, 1, 1, \"000\", 3)\nmakeBeat(IRCA_OS_BONGO_LOW_OPEN, 2, 1, \"0000\", 4)",
        "javascript": "// Bongo triplets\nmakeBeat(IRCA_OS_BONGO_HIGH_OPEN, 1, 1, \"000\", 3);\nmakeBeat(IRCA_OS_BONGO_LOW_OPEN, 2, 1, \"0000\", 4);"
      }
    },
    "makeBeatSlice1": {
      "description": "Creates a rhythmic pattern through specifying a string of characters indicating the start position within a sound. Unlike makeBeat, which always plays sounds from the beginning, makeBeatSlice lets you create rhythms that combine many different slices of sound from the same sound.",
      "parameters": {
        "sound": {
          "description": "A single sound. Typically this is a constant from the sound browser"
        },
        "track": {
          "description": "Track to place pattern onto"
        },
        "start": {
          "description": "Location within the track to start pattern (e.g. 1 will start at the beginning of measure 1)"
        },
        "beat": {
          "description": "A string indicating the rhythmic pattern to play. \"0\" through \"9\" and \"A\" through \"F\" plays the sound at the location specified at the corresponding index of the beatNumber list/array for a sixteenth note. \"+\" ties (i.e. continues or sustains) the sound for an additional sixteenth note. \"-\" rests (i.e. creates silence) for a sixteenth note."
        },
        "sliceStarts": {
          "description": "A list/array of starting locations within the sound. For example, [1.0, 2.5] creates two time locations at measure 1 and measure 2.5 of the sound that can be referenced in the beat string by \"0\" and \"1\" respectively."
        }
      },
      "example": {
        "python": "# Slice and rearrange by sixteenth notes\ns = RD_RNB_MOOGLEAD_10\nslices = [1.0, 1.375, 1.25, 1.5, 2.0, 2.25]\nmakeBeatSlice(s, 1, 1, \"4--04-0-30-10+30\", slices)",
        "javascript": "// Slice and rearrange by sixteenth notes\nvar s = RD_RNB_MOOGLEAD_10;\nvar slices = [1.0, 1.375, 1.25, 1.5, 2.0, 2.25];\nmakeBeatSlice(s, 1, 1, \"4--04-0-30-10+30\", slices);"
      }
    },
    "makeBeatSlice2": {
      "description": "Creates a rhythmic pattern through specifying a string of characters indicating the start position within a sound. Unlike makeBeat, which always plays sounds from the beginning, makeBeatSlice lets you create rhythms that combine many different slices of sound from the same sound.",
      "parameters": {
        "sound": {
          "description": "A single sound. Typically this is a constant from the sound browser"
        },
        "track": {
          "description": "Track to place pattern onto"
        },
        "start": {
          "description": "Location within the track to start pattern (e.g. 1 will start at the beginning of measure 1)"
        },
        "beat": {
          "description": "A string indicating the rhythmic pattern to play. \"0\" through \"9\" and \"A\" through \"F\" plays the sound at the location specified at the corresponding index of the beatNumber list/array for a sixteenth note. \"+\" ties (i.e. continues or sustains) the sound for an additional sixteenth note. \"-\" rests (i.e. creates silence) for a sixteenth note."
        },
        "sliceStarts": {
          "description": "A list/array of starting locations within the sound. For example, [1.0, 2.5] creates two time locations at measure 1 and measure 2.5 of the sound that can be referenced in the beat string by \"0\" and \"1\" respectively."
        },
        "stepsPerMeasure": {
          "description": "A number that specifies the length of time for a single character in your beat string. The default value of 16 results in one sixteenth note."
        }
      },
      "example": {
        "python": "# Slice and rearrange by eighth notes\nsound = HIPHOP_TRAPHOP_BEAT_002\neighths = [1.0, 1.125, 1.25, 1.375, 1.5, 1.625, 1.75, 1.875]\nbeat = \"01261264\"\nmakeBeatSlice(sound, 1, 1, beat, eighths, 8)",
        "javascript": "// Slice and rearrange by eighth notes\nvar sound = HIPHOP_TRAPHOP_BEAT_002;\nvar eighths = [1.0, 1.125, 1.25, 1.375, 1.5, 1.625, 1.75, 1.875];\nvar beat = \"01261264\";\nmakeBeatSlice(sound, 1, 1, beat, eighths, 8);"
      }
    },
    "print": {
      "description": "ᐃᓕᔪᑎᖓᓐᓂ ᖃᐅᔨᓴᐅᑎᑉ ᓂᑉᑕᔪᑦ.",
      "parameters": {
        "input": {
          "description": "ᐊᑑᑎᖏᑦ ᐊᓕᓚᔪᒻᒧᑦ ᐊᒥᓱᓕᐅᕆᐊᓖᑦ"
        }
      },
      "example": {
        "python": "print(1 + 2)\nprint(\"hello!\")"
      }
    },
    "println": {
      "description": "ᐃᓕᔪᑎᖓᓐᓂ ᖃᐅᔨᓴᐅᑎᑉ ᓂᑉᑕᔪᑦ.",
      "parameters": {
        "input": {
          "description": "ᐊᑑᑎᖃᕐᓂᖏᑦ ᐊᓕᓚᔪᒻᒧᑦ ᐃᓕᔭᐅᓂᐊᖅᑐᑦ"
        }
      },
      "example": {
        "javascript": "println(1 + 2);\nprintln(\"hello!\");"
      }
    },
    "readInput": {
      "description": "ᑕᒻᓇ ᐅᑐᕐᓗᒍ ᐊᑐᖅᑎᑕᐅᔪᖅ ᐃᓕᓯᓂᐊᖅᐸᑦ ᓄᑕᒻᒥᒃ.",
      "parameters": {
        "prompt": {
          "description": "ᓇᓗᓇᐃᑯᑕᖓ ᐊᑐᖅᑎᑕᐅᔪᑉ ᐊᐱᕆᔭᐅᒃᐸᒃ ᐃᓕᓯᖁᔭᐅᓗᓐᓂ."
        }
      },
      "returns": {
        "description": "ᓄᑕᖅ ᐃᓕᔭᐅᓚᐅᖅᑐᖅ ᐊᑐᖅᑎᐅᔪᒻᒧᑦ."
      },
      "example": {
        "python": "# User-provided beat string\nbeat = readInput(\"Enter a beat, like 0-0-0\")\nmakeBeat(OS_CLAP01, 1, 1, beat)",
        "javascript": "// User-provided beat string\nvar beat = readInput(\"Enter a beat, like 0-0-0\");\nmakeBeat(OS_CLAP01, 1, 1, beat);"
      }
    },
    "replaceListElement": {
      "description": "ᐊᓯᐊᖑᓗᒃᑖᕐᓗᒋᑦ ᑎᑎᖃᑦ ᐊᕕᒃᓯᒪᓂᖏᓪᓗ ᓄᑕᓐᓂᒃ ᑎᑎᕋᖅᓯᒪᔪᓐᓂᒃ.",
      "parameters": {
        "list": {
          "description": "Original list/array"
        },
        "elementToReplace": {
          "description": "ᐅᑯᐊ ᐊᓯᐊᖑᕆᐊᖃᖅᑐᑦ."
        },
        "withElement": {
          "description": "ᓄᑕᖅ ᐃᓕᖁᓯᖓ ᐊᓯᖏᓐᓄᑦ ᐊᑐᓚᐅᖅᑐᓐᓄᑦ ᐃᓕᔭᐅᓂᐊᖅᑐᖅ ᐃᓕᖁᓯᕆᓚᐅᖅᑕᖏᓐᓄᑦ elementToReplace."
        }
      },
      "example": {
        "python": "# Replace OS_SNARE01 wth OS_CLAP01\nsounds = [OS_KICK01, OS_SNARE01, OS_CLOSEDHAT01]\nreplaced = replaceListElement(sounds, OS_SNARE01, OS_CLAP01)",
        "javascript": "// Replace OS_SNARE01 wth OS_CLAP01\nvar sounds = [OS_KICK01, OS_SNARE01, OS_CLOSEDHAT01];\nvar replaced = replaceListElement(sounds, OS_SNARE01, OS_CLAP01);"
      }
    },
    "replaceString": {
      "description": "ᑕᒻᓇ ᐃᓕᖁᓯᖓ ᐊᓯᐊᖑᖅᑎᑦᓯᔪᑦ ᑕᒪᐃᓐᓂᒃ ᐃᓕᖁᓯᖏᓐᓂᒃ ᓄᑕᒻᒥᒃ ᐃᓕᖁᓯᖃᓕᖅᖢᓐᓂ.",
      "parameters": {
        "string": {
          "description": "ᐊᑐᒐᐅᔪᑐᖃᖅ ᓂᐱᐅᑉ ᐊᒃᖢᓇᐅᔭᖓ"
        },
        "characterToReplace": {
          "description": "ᐃᓕᓯᖏᑦ ᓂᐱᐅᑉ ᐊᒃᖢᓇᐅᔭᖓᑕ ᐊᓯᐊᖑᖅᑕᐅᓂᐊᖅᑐᑦ"
        },
        "withCharacter": {
          "description": "ᓄᑕᖅ ᑎᑎᖃᖅ ᐊᓯᐊᖑᖅᑎᑦᓯᓂᐊᖅᑐᖅ ᒪᓕᒐᐅᓚᐅᖅᑐᓐᓂᒃ characterToReplace"
        }
      },
      "returns": {
        "description": "ᓄᑕᖅ ᓂᐱᖓᓐᓄᑦ ᐊᒃᖢᓇᐅᔭᖅ ᓇᒻᒪᒃᑐᓐᓂᒃ ᑎᑎᕋᖅᓯᒪᔪᖅ ᐊᓯᖏᓐᓂᒃ"
      },
      "example": {
        "python": "# Change all '0's to '1's\nbeat1 = \"0---0---0---0---\"\nbeat2 = replaceString(beat1, \"0\", \"1\")",
        "javascript": "// Change all '0's to '1's\nvar beat1 = \"0---0---0---0---\";\nvar beat2 = replaceString(beat1, \"0\", \"1\");"
      }
    },
    "reverseList": {
      "description": "ᐅᑎᒻᒧᑦ ᐃᓗᓕᖏᑦ ᑎᑎᕋᕐᓗᒋᑦ ᑲᑎᑕᐅᓯᒪᔪᑦ.",
      "parameters": {
        "list": {
          "description": "List/array to reverse"
        }
      },
      "returns": {
        "description": "ᓄᑖᖅ ᑎᑎᕋᖅ/ᑲᑎᒪᐅᓯᒪᔪᑦ ᐅᑎᒻᒧᑦ ᐋᕿᒃᓱᖅᓯᒪᔪᑦ"
      },
      "example": {
        "python": "# Reverse a list of sounds\nsounds = [OS_CLAP04, OS_COWBELL03, OS_LOWTOM02]\nreversed = reverseList(sounds)",
        "javascript": "// Reverse an array of sounds\nvar sounds = [OS_CLAP04, OS_COWBELL03, OS_LOWTOM02];\nvar reversed = reverseList(sounds);"
      }
    },
    "reverseString": {
      "description": "ᐃᓕᖁᓯᑐᖃᖓᓐᓄᑦ ᐅᑎᖅᑎᓱᒪᓐᓂᕈᖕᓂ ᐊᕿᒃᑕᐅᓯᒪᔪᑦ.",
      "parameters": {
        "string": {
          "description": "String to reverse"
        }
      },
      "returns": {
        "description": "ᓄᑕᑦ ᐃᓕᖁᓯᖏᑦ ᑎᑎᖃᑦ ᑭᓯᐊᓐᓂ ᐅᑎᖅᑎᑕᐅᓯᒪᔪᑦ"
      },
      "example": {
        "python": "# Reverse a beat string\nbeat = \"0+++0---0----000\"\nreversed = reverseString(beat)",
        "javascript": "// Reverse a beat string\nvar beat = \"0+++0---0----000\";\nvar reversed = reverseString(beat);"
      }
    },
    "rhythmEffects": {
      "description": "ᑎᑎᖃᑦ ᒪᓕᒡᓗᒋᑦ ᐊᔨᒌᓐᓂᒃ ᓂᐱᖃᖅᑐᑦ ᓇᓗᓇᐃᑯᑕᐅᑉᓗᑎᒃ ᐊᕿᒃᑕᐅᓯᒪᓂᖏᓐᓂᒃ",
      "parameters": {
        "track": {
          "description": "ᓇᓗᓇᐃᑯᑕᖓ ᐃᓕᔭᐅᓯᒪᔪᑦ ᐅᑯᓄᖓ (ᐅᕙᓗᓂᑦ MIX_TRACK ᓂᐱᓕᐅᕐᓕᑯᓄᑦ ᐊᑐᒐᐅᖁᑉᓗᒍ)."
        },
        "effect": {
          "description": "Options: BANDPASS, CHORUS, COMPRESSOR, DELAY, DISTORTION, EQ3BAND, FILTER, FLANGER, PAN, PHASER, PITCHSHIFT, REVERB, RINGMOD, TREMOLO, VOLUME, or WAH."
        },
        "parameter": {
          "description": "Constant indicating which parameter of the effectType to create the envelope for. (See <a href='#' onclick='event.preventDefault(); loadCurriculumChapter(\"/en/v1/every-effect-explained-in-detail.html\")'>Every Effect Explained in Detail</a> in the curriculum sidebar for a complete list of effect parameters.)"
        },
        "values": {
          "description": "List/Array of effect parameter values (e.g. [0.0, 5.3, -12])."
        },
        "start": {
          "description": "Location within the track to start pattern"
        },
        "beat": {
          "description": "A string indicating the rhythmic envelope pattern to create. \"0\" through \"9\" uses the effect parameter value at the location specified at the corresponding index of the effectList list/array for a sixteenth note. \"+\" ties (i.e. continues or sustains) the parameter value for an additional sixteenth note. \"-\" ramps (i.e. creates a gradual change) to the next parameter value for a sixteenth note."
        },
        "stepsPerMeasure": {
          "description": "A number that specifies the length of time of a single character in your beatString. The default value of 16 results in one sixteenth note."
        }
      },
      "example": {
        "python": "# Change the pitchshift over time\nfitMedia(DUBSTEP_BASS_WOBBLE_015, 1, 1, 3)\nrhythmEffects(1, PITCHSHIFT, PITCHSHIFT_SHIFT, [0, -12], 1, \"0---1++0\", 4)",
        "javascript": "// Change the pitchshift over time\nfitMedia(DUBSTEP_BASS_WOBBLE_015, 1, 1, 3);\nrhythmEffects(1, PITCHSHIFT, PITCHSHIFT_SHIFT, [0, -12], 1, \"0---1++0\", 4);"
      }
    },
    "selectRandomFile": {
      "description": "ᓇᑭᒥᐊᖅ ᐱᒋᐊᕐᕕᒋᓂᐊᖅᑕᖓᑕ ᓂᐱᒻᒥᒃ ᑐᖅᑯᐃᕝᕕᖓᓂᒃ.",
      "parameters": {
        "folderSubstring": {
          "description": "Substring indicating which standard folders to pick a random sound from. Typically, this is part of a folder name (not a sound constant) from the sound browser."
        }
      },
      "returns": {
        "description": "ᓂᐱᖓ ᐊᑕᐅᓯᒥᐊᖅ ᑐᖅᑯᐃᕝᕕᒃ."
      },
      "example": {
        "python": "# Choose a random sound from a folder\nsound = selectRandomFile(ALT_POP_GUITAR)\nfitMedia(sound, 1, 1, 5)",
        "javascript": "// Choose a random sound from a folder\nvar sound = selectRandomFile(ALT_POP_GUITAR);\nfitMedia(sound, 1, 1, 5);"
      }
    },
    "setEffect1": {
      "description": "ᑕᒻᓇ ᑭᓯᐊᓐᓂ ᐊᑐᒐᓱᖅᑐᖅ ᓂᐱᐅᑉ ᐊᑐᒐᐅᔪᑉ ᓇᓗᓇᐃᑯᑕᖓᓐᓄᑦ ᑭᒡᓕᖃᕐᓂᖏᓐᓄᑦ ᓂᐱᓕᐅᕈᑎᐅᑉ ᐃᓗᐊᓐᓂ. ᑐᑭᓯᑲᓂᕈᑎᑦ ᐊᑐᒐᐅᓂᖏᑕ ᐊᒃᑐᐃᓂᖏᓐᓄᑦ ᐊᒃᓱᕈᑎᑉ(), ᑕᑯᒋᐊᕐᓗᒍ <a href='#' onclick='event.preventDefault(); loadCurriculumChapter(\"/en/v1/every-effect-explained-in-detail.html\")'>ᐊᒃᑐᐃᓂᓗᒃᑖᑦ ᐅᓂᑉᑳᒐᐅᔪᑦ ᓇᓗᓇᐃᖅᓯᒪᑉᓗᑎᒃ</a> ᐃᓕᓐᓂᐊᕈᑎᓐᓂ.",
      "parameters": {
        "track": {
          "description": "ᓂᐱᐅᑉ ᐊᒃᑐᐃᓂᖏᓐᓄᑦ ᐃᓕᔭᐅᓂᐊᖅᑐᖅ (ᐊᑯᑕᐅᓗᓂᓘᓐᓃᑦ ᓂᐱᓕᐅᖅᓯᒪᔪᖅ ᑕᒪᐃᓐᓄᑦ ᑐᓵᕐᓈᒐᐅᓂᐊᖅᑐᓐᓄᑦ)"
        },
        "type": {
          "description": "Options: BANDPASS, CHORUS, COMPRESSOR, DELAY, DISTORTION, EQ3BAND, FILTER, FLANGER, PAN, PHASER, PITCHSHIFT, REVERB, RINGMOD, TREMOLO, VOLUME, or WAH"
        },
        "parameter": {
          "description": "Constant indicating which parameter of the effectType to create the envelope for. (See <a href='#' onclick='event.preventDefault(); loadCurriculumChapter(\"/en/v1/every-effect-explained-in-detail.html\")'>Every Effect Explained in Detail</a> in the curriculum sidebar for a complete list of effect parameters.)"
        },
        "value": {
          "description": "Value of effect parameter"
        }
      },
      "example": {
        "python": "# Apply a delay effect\nfitMedia(Y11_SNARE_1, 1, 1, 5)\nsetEffect(1, DELAY, DELAY_TIME, 145)",
        "javascript": "// Apply a delay effect\nfitMedia(Y11_SNARE_1, 1, 1, 5);\nsetEffect(1, DELAY, DELAY_TIME, 250);"
      }
    },
    "setEffect2": {
      "description": "ᑖᑉᓱᒪ ᐊᐅᓚᓂᖓ ᐊᑐᒐᐅᔪᖅ ᓂᐱᓕᐅᕈᑎᐅᑉ ᓈᓴᐅᑎᖏᓐᓄᑦ. ᐊᓯᖏᑎᑑᖏᑐᖅ ᐋᕿᒃᑕᐅᓯᒪᑉᓗᓐᓂ ᐅᑯᐊᑎᑐᑦ(), ᐊᓯᖏᓐᓂᑦ ᐃᓱᒪᒋᔭᐅᓯᒪᔪᖃᕋᓗᐊᕐᓗᓐᓂ ᐊᓯᐊᖑᕈᑎᓐᓂᒃ ᐊᒃᑐᐃᓂᖏᑕ ᑭᔨᓕᖃᕐᓂᖏᓐᓄᑦ. ᑐᑭᓯᑲᓂᕈᑎᑦ ᐊᒃᑐᐃᓂᖏᓐᓄᑦ ᑕᒻᓇ ᐊᑐᒐᐅᓗᓐᓂ (), ᑕᑯᒋᐊᕐᓗᒋᑦ ᐃᓕᓐᓂᐊᕈᑎᑦ: <a href='#' onclick='event.preventDefault(); loadCurriculumChapter(\"/en/v1/every-effect-explained-in-detail.html\")'>ᖃᓄᐃᓕᐅᕐᓂᓗᒃᑖᖏᑦ ᐅᓂᑉᑳᖅᓯᒪᕗᑦ</a>",
      "parameters": {
        "startValue": {
          "description": "Value of effect parameter at beginning of effect envelope"
        },
        "start": {
          "description": "Location within the track of the startValue"
        },
        "endValue": {
          "description": "Value of effect parameter at end of effect envelope"
        },
        "end": {
          "description": "Location within the track of the endValue"
        }
      },
      "example": {
        "python": "# Increase the filter frequency over time\nfitMedia(HOUSE_BREAK_FILL_001, 1, 1, 3)\nsetEffect(1, FILTER, FILTER_FREQ, 600, 1, 6000, 3)",
        "javascript": "// Increase the filter frequency over time\nfitMedia(HOUSE_BREAK_FILL_001, 1, 1, 3);\nsetEffect(1, FILTER, FILTER_FREQ, 600, 1, 6000, 3);"
      }
    },
    "setTempo1": {
      "description": "Sets the tempo for the project.",
      "parameters": {
        "tempo": {
          "description": "The project tempo in beats per minute (BPM). Minimum tempo is 45 BPM. Maximum tempo is 220 BPM."
        }
      },
      "example": {
        "python": "# Set the tempo to 110 BPM\nsetTempo(110)",
        "javascript": "// Set the tempo to 110 BPM\nsetTempo(110);"
      }
    },
    "setTempo2": {
      "description": "Change the tempo for a section of the project.",
      "parameters": {
        "startTempo": {
          "description": "Tempo at beginning of section in beats per minute (BPM)"
        },
        "start": {
          "description": "Measure where section begins"
        },
        "endTempo": {
          "description": "Tempo at end of section (if omitted, new tempo persists until next tempo point)"
        },
        "end": {
          "description": "Measure where section ends"
        }
      },
      "example": {
        "python": "# Set the tempo to 110 BPM at measure 2\nsetTempo(110, 2)\n# Ramp tempo from 80 to 140 BPM from measures 3 to 6\nsetTempo(80, 3, 140, 6)",
        "javascript": "// Set the tempo to 110 BPM at measure 2\nsetTempo(110, 2);\n// Ramp tempo from 80 to 140 BPM from measures 3 to 6\nsetTempo(80, 3, 140, 6);"
      }
    },
    "shuffleList": {
      "description": "ᐊᕿᒃᓱᕐᓗᒋᑦ ᐃᓗᓕᖏᑦ ᑎᑎᖃᑦ ᑲᑎᑕᐅᓂᖏᓪᓗ ᒪᓕᒡᓗᒋᑦ.",
      "parameters": {
        "list": {
          "description": "ᑎᑎᖃᕐᓗᒋᑦ/ᑲᑎᑕᐅᓂᖏᑦ ᐊᑉᒍᑉᓗᒋᑦ"
        }
      },
      "returns": {
        "description": "ᓄᑖᖅ ᑎᑎᖃᑦ/ᑲᑎᑕᐅᓯᒪᔪᑦ ᐅᖃᐅᓯᖏᑦ ᒪᓕᒐᐅᑉᓗᑎᒃ."
      },
      "example": {
        "python": "# Shuffle a list of sounds\nsounds = [OS_CLAP04, OS_COWBELL03, OS_LOWTOM02]\nshuffled = shuffleList(sounds)",
        "javascript": "// Shuffle an array of sounds\nvar sounds = [OS_CLAP04, OS_COWBELL03, OS_LOWTOM02];\nvar shuffled = shuffleList(sounds);"
      }
    },
    "shuffleString": {
      "description": "ᓇᓕᐊᖕᓂᒥᐊᖅ ᐊᑐᓕᖅᑎᑦᓯᔪᑦ ᑕᐅᑐᒐᐅᔪᒪᔪᓐᓂᒃ.",
      "parameters": {
        "string": {
          "description": "ᖃᓄᒥᐊᖅ ᓂᐱᓂᒍᑎᖓ"
        }
      },
      "returns": {
        "description": "ᓄᑖᑦ ᐃᓕᖁᓯᖏᑦ ᓱᓇᓐᓂᒃ ᐅᖃᐅᓯᖏᑕ ᖃᓄᒥᐊᖅ ᐋᕿᒃᓯᒪᔪᑦ."
      },
      "example": {
        "python": "# Shuffle a beat string\nbeat = \"0-0-0-0-0-0-0-0-\"\nshuffled = shuffleString(beat)",
        "javascript": "// Shuffle a beat string\nvar beat = \"0-0-0-0-0-0-0-0-\";\nvar shuffled = shuffleString(beat);"
      }
    }
  },
  "templates": {
    "python": "# description: \nfrom earsketch import *\n\nsetTempo(120)\n",
    "javascript": "// description: \nsetTempo(120);\n"
  },
  "console": {
    "warning": "Warning",
    "error": "Error",
    "errors": {
      "AssertionError": "An assert statement failed",
      "AttributeError": "There is a mismatch between the object and the attribute",
      "ImportError": "The appropriate packages cannot be found or imported",
      "IndentationError": "There is an indentation error in the code (lack or extra spaces)",
      "IndexError": "There is an error using an out of range index",
      "KeyError": "There is an error using a dictionary key that does not exist",
      "NameError": "There is an error with a variable or function name that is not defined",
      "ParseError": "There is an error when reading the code",
      "SyntaxError": "There is an error with the syntax (or arrangement) of code",
      "TypeError": "There is an error with the expected data type",
      "TokenError": "There is an unexpected token error (extra or missing comma, space, or character) in the code",
      "ValueError": "A provided argument is not within the set or range of acceptable values for a function",
      "RangeError": "A provided argument is not within the set or range of acceptable values for a function",
      "ReferenceError": "There is an error with a variable or function name that is not defined",
      "NetworkError": "Please try running the code again. If the issue persists, check your internet connection or contact network administrator.",
      "ServerError": "Please try running the code again. If the issue persists, please report the issue using 'Report Error' in the information menu."
    }
  }
}
