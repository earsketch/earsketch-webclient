{
  "common": {
    "loading": "Wird geladen...",
    "contentManager.title": "Content Manager",
    "contentManager.openTab": "Open {{name}} Tab",
    "thing.collapse": "{{name}} einklappen",
    "thing.expand": "{{name}} aufklappen",
    "search": "Suche",
    "results": "Ergebnisse",
    "noResults": "Keine Ergebnisse",
    "soundBrowser.title": "Sounds",
    "soundBrowser.title.collection": "Sound-Sammlung",
    "soundBrowser.title.featuredArtist": "Vorgestellter Künstler",
    "soundBrowser.title.recommendations": "Empfehlungen",
    "soundBrowser.button.addSound": "Sound hinzufügen",
    "soundBrowser.button.showOnlyStars": "Zeige nur",
    "soundBrowser.button.showOnlyStarsDescriptive": "Nur Favoriten anzeigen",
    "soundBrowser.button.backToTop": "Zurück zum Anfang",
    "filter": "Filter",
    "startQuickTour": "Quick Tour starten",
    "switchThemeLight": "Zum dunklen Farbschema wechseln",
    "switchThemeDark": "Zum hellen Farbschema wechseln",
    "reportError": "Fehler melden",
    "whatsNew": "Was gibt's Neues?",
    "leave": "Verlassen",
    "soundBrowser.expandSoundFolder": "Tonordner erweitern {{folder}}",
    "soundBrowser.expandFilters": "Sound-Browser-Filter-Taste aufklappen",
    "soundBrowser.collapseFilters": "Sound-Browser-Filter-Taste einklappen",
    "soundBrowser.clearFilters": "Filter zurücksetzen",
    "soundBrowser.filterDropdown.artists": "Interpreten",
    "soundBrowser.filterDropdown.genres": "Genres",
    "soundBrowser.filterDropdown.instruments": "Instrumente",
    "soundBrowser.filterDropdown.keys": "Tasten",
    "soundBrowser.clip.tooltip.file": "Datei",
    "soundBrowser.clip.tooltip.folder": "Ordner",
    "soundBrowser.clip.tooltip.artist": "Interpret",
    "soundBrowser.clip.tooltip.genre": "Genre",
    "soundBrowser.clip.tooltip.instrument": "Instrument",
    "soundBrowser.clip.tooltip.originalTempo": "Originaltempo",
    "soundBrowser.clip.tooltip.year": "Jahr",
    "soundBrowser.clip.tooltip.previewSound": "Sound-Vorschau",
    "soundBrowser.clip.tooltip.markFavorite": "Als Favorit markieren",
    "soundBrowser.clip.tooltip.paste": "In den Editor einfügen",
    "soundBrowser.clip.tooltip.key": "Tonart",
    "scriptBrowser.filterDropdown.clearFilter": "Filter nach {{filterName}} leeren",
    "scriptBrowser.filterDropdown.owner": "Besitzer",
    "scriptBrowser.filterDropdown.fileType": "Dateityp",
    "scriptBrowser.filterDropdown.filterBy": "Nach {{filter}} filtern",
    "scriptBrowser.filterDropdown.filterByFile": "Nach Dateityp filtern",
    "scriptBrowser.filterDropdown.filterByOwner": "Nach Besitzer filtern",
    "scriptBrowser.filterDropdown.sortBy": "Sortieren nach",
    "scriptBrowser.filterDropdown.sortByName": "Nach {{filtername}} sortieren",
    "scriptBrowser.showDeleted": "Gelöschte anzeigen",
    "scriptBrowser.deletedscripts": "Gelöschte Skripte",
    "scriptBrowser.openInEditor": "{{name}} im Code Editor öffnen",
    "scriptBrowser.restore": "Wiederherstellen",
    "scriptBrowser.options.close": "Skript-Optionen schließen",
    "scriptBrowser.collab.sharedWith": "Geteilt mit {{collaborators}}",
    "scriptBrowser.shared.sharedBy": "Geteilt von {{username}}",
    "script.options.copy": "Kopie von {{scriptname}} erstellen",
    "keepUnsavedTabs": "Ungespeicherte Tabs offen lassen",
    "discardChanges": "Änderungen verwerfen",
    "script": "Skript",
    "version": "Version",
    "numSounds": "{{count}} Sound",
    "numSounds_plural": "{{count}} Sounds",
    "script_plural": "Skripte",
    "scriptBrowser.myScripts": "Meine Skripte",
    "scriptBrowser.sharedScripts": "Geteilte Skripte",
    "daw.title": "Digital Audio Workstation",
    "daw.shortTitle": "DAW",
    "daw.effect": "Effekt",
    "daw.effect_plural": "Effekte",
    "daw.tooltip.reset": "Zurücksetzen",
    "daw.tooltip.play": "Wiedergabe",
    "daw.tooltip.loopProject": "Projekt wiederholen",
    "daw.tooltip.pause": "Pausieren",
    "daw.tooltip.autoScroll": "Automatisches Scrollen, um der Wiedergabe zu folgen",
    "daw.tooltip.toggleMetronome": "Metronom ein/aus",
    "daw.tooltip.toggleVolume": "Lautstärke ein/aus",
    "daw.tooltip.solo": "Solo",
    "daw.tooltip.mute": "Mute",
    "daw.tooltip.muteTrack": "Track- {{name}} muten",
    "daw.tooltip.unmuteTrack": "Track- {{name}} entmuten",
    "daw.tooltip.soloTrack": "Solo Track {{name}}",
    "daw.tooltip.unsoloTrack": "Solo aus für Track {{name}}",
    "daw.abbreviation.solo": "S",
    "daw.abbreviation.mute": "M",
    "daw.tooltip.toggleEffects": "Alle Effekte ein/aus",
    "daw.bypass": "Überspringen",
    "daw.needsSync": "Skript ausführen, um DAW zu synchronisieren",
    "newScript": "Neues Skript",
    "editor.title": "Code Editor",
    "editor.blocksMode": "Blockmodus",
    "editor.autocomplete": "Auto-Vervollständigung",
    "editor.playArrows": "Wiedergabe-Pfeile",
    "editor.blocksMode.tooltip-enable": "Blockmodus aktivieren",
    "editor.autocomplete.tooltip-enable": "Automatische Vervollständigung aktivieren",
    "editor.blocksMode.tooltip-disable": "Blockmodus deaktivieren",
    "editor.autocomplete.tooltip-disable": "Automatische Vervollständigung deaktivieren",
    "editor.run": "Ausführen",
    "editor.undoEdit": "Code Bearbeitung rückgängig machen",
    "editor.redoEdit": "Code Bearbeitung wiederherstellen",
    "editor.noScriptsLoaded": "Du hast keine Skripte geladen.",
    "editor.clickHereCreateScript": "Klicke hier, um ein neues Skript zu erstellen!",
    "editor.mode": "Du bist im <span class=\"empty-script-lang\">{{scriptlang}}</span> Modus.",
    "editor.ifYouWant": "Wenn du in den <span class=\"empty-script-lang\">{{otherScriptLang}}</span> Modus wechseln willst, <br /> bitte öffne ein Skript mit <span class=\"empty-script-lang\">{{otherScriptExt}}</span> oder erstelle ein neues <br /> und wähle <span class=\"empty-script-lang\">{{otherScriptLang}}</span> als Skriptsprache aus.",
    "editor.stepCount": "{{count}} Schritt",
    "editor.stepCount_plural": "{{count}} Schritte",
    "tabs.otherTabs": "Weitere Tabs",
    "tabs.closeAll": "Alle schließen",
    "footer.teachers": "Lehrer",
    "footer.help": "Hilfe / Kontakt",
    "thing.open": "Öffnen",
    "thing.close": "Schließen",
    "script.copy": "Kopie erstellen",
    "script.rename": "Umbenennen",
    "script.download": "Herunterladen",
    "script.print": "Drucken",
    "script.share": "Teilen",
    "script.submitCompetition": "Beim Wettbewerb einreichen",
    "script.submitCompetitionrDescriptive": " {{name}} beim Wettbewerb einreichen",
    "script.history": "Verlauf",
    "script.historyDescriptive": "{{name}} Verlauf anzeigen",
    "script.codeIndicator": "Code Indikator",
    "script.codeIndicatorDescriptive": "Code Indikator für {{name}}",
    "script.import": "Importieren",
    "script.delete": "Löschen",
    "sharedScript.noDescription": "Dieses Skript hat keine Beschreibung.",
    "sharedScript.originalAuthor": "Originaler Autor",
    "sharedScript.collaborators": "Mitwirkende",
    "sharedScript.license": "Lizenzinformation",
    "sharedScript.viewOnlyLink": "\"Nur anzeigen\" Link",
    "lastModified": "Zuletzt geändert",
    "ok": "Okay",
    "confirm": "Bestätigen",
    "default": "Standard",
    "importToEdit": "Zum Bearbeiten importieren",
    "notifications.title": "Mitteilungen",
    "notifications.pinned": "Angeheftete Mitteilungen",
    "notifications.other": "Andere Mitteilungen",
    "notifications.viewAll": "Alle anzeigen",
    "notifications.markAllRead": "Alle als gelesen markieren",
    "forgotPassword.title": "Passwort vergessen?",
    "forgotPassword.prompt": "Bitte gib die mit deinem Konto verknüpfte E-Mail-Adresse ein",
    "forgotPassword.submit": "Wiederherstellen",
    "forgotPassword.email": "E-Mail",
    "createResetAccount": "Konto erstellen/zurücksetzen",
    "accountCreator.prompt": "Ein Konto erstellen",
    "accountCreator.success": "Konto wurde erstellt!",
    "accountCreator.submit": "Konto erstellen",
    "formfieldPlaceholder.username": "Benutzername",
    "formfieldPlaceholder.password": "Passwort",
    "formfieldPlaceholder.confirmPassword": "Passwort bestätigen",
    "formFieldPlaceholder.email": "E-Mail-Adresse",
    "formFieldPlaceholder.emailOptional": "E-Mail-Adresse (optional)",
    "formFieldPlaceholder.emailOptional.usedFor": "Wir verwenden dies nur, wenn du dein Passwort vergessen hast",
    "formFieldPlaceholder.firstName": "Vorname",
    "formFieldPlaceholder.lastName": "Nachname",
    "formFieldPlaceholder.currentPassword": "Aktuelles Passwort bestätigen",
    "formFieldPlaceholder.newPassword": "Neues Passwort",
    "formFieldPlaceholder.confirmNewPassword": "Neues Passwort bestätigen",
    "cancel": "Abbrechen",
    "update": "Aktualisieren",
    "save": "Speichern",
    "saveAndSend": "Speichern und senden",
    "upload": "Hochladen",
    "editProfile": "Profil bearbeiten",
    "registerAccount": "Neues Konto erstellen",
    "logout": "Abmelden",
    "notifications.none": "Es gibt keine Mitteilungen.",
    "notifications.doNotDisturbEnabled": "Mitteilungs-Pop-ups: AUS",
    "notifications.doNotDisturbDisabled": "Mitteilungs-Pop-ups: AN",
    "notifications.switchDoNotDisturbOff": "Mitteilungs-Pop-ups aktivieren",
    "notifications.switchDoNotDisturbOn": "Mitteilungs-Pop-ups deaktivieren",
    "profileEditor.prompt": "Profil von {{username}} bearbeiten",
    "profileEditor.error": "Beim Aktualisieren des Benutzerprofils ist ein Fehler aufgetreten.",
    "profileEditor.success": "Dein Benutzerprofil wurde aktualisiert!",
    "changePassword.prompt": "Passwort ändern",
    "changePassword.success": "Passwort erfolgreich geändert!",
    "download.multiTrack": "Multi-Track",
    "scriptHistory.running": "Skriptversion wird ausgeführt...",
    "scriptHistory.versionSuccess": "Diese Version wurde erfolgreich ausgeführt.",
    "scriptHistory.versionError": "In dieser Version ist ein Fehler aufgetreten.",
    "scriptHistory.restore": "Version wiederherstellen",
    "scriptHistory.title": "Versionsverlauf von {{scriptName}}",
    "scriptHistory.heading": "Versionsverlauf",
    "scriptHistory.diff": "Unterschiede zur vorherigen Version",
    "scriptHistory.activeCollab": "Aktive Mitwirkende",
    "scriptHistory.onlyMyScripts": "Du kannst die Skripte nur unter $t(scriptBrowser.myScripts) zurücksetzen",
    "scriptHistory.fetching": "Skriptverlauf wird abgerufen.",
    "renameScript.title": "Skript umbenennen",
    "renameScript.prompt": "Gib den neuen Namen für dieses Skript ein:",
    "rename.submit": "Umbenennen",
    "renameScript.appendSuffix": "Suffix anhängen",
    "renameScript.alreadyExists": "Ein Skript namens „{{scriptName}}“ existiert bereits in deinem Arbeitsbereich.`",
    "renameSound.title": "Sound umbenennen",
    "renameSound.prompt": "Gib den neuen Namen für deinen Sound ein:",
    "create": "Erstellen",
    "scriptCreator.title": "Neues Skript erstellen",
    "scriptCreator.scriptName": "Skript Name",
    "scriptCreator.scriptName.subtext": "Wie soll dein Skript heißen?",
    "scriptCreator.scriptLang": "Skript-Sprache",
    "scriptCreator.scriptLang.subtext": "Welche Programmiersprache verwendest du?",
    "scriptAnalysis.title": "Code-Concept-Indikator für {{scriptName}}",
    "scriptAnalysis.category.loops": "Schleifen",
    "scriptAnalysis.category.conditionals": "Bedingungen",
    "scriptAnalysis.category.conditionalsWithBool": "Bedingungen mit Booleans",
    "scriptAnalysis.category.lists": "Listen",
    "scriptAnalysis.category.listStringOps": "Listen- und String-Operationen",
    "scriptAnalysis.category.userFunctions": "Benutzerdefinierte Funktionen",
    "category": "Kategorie",
    "count": "Zähle",
    "total": "Gesamt",
    "exit": "Beenden",
    "more": "Mehr",
    "scriptShare.title": "„{{scriptName}}“ teilen",
    "scriptShare.tab.viewonly.downloadShortcutFile": "URL Verknüpfungsdatei herunterladen",
    "scriptShare.tab.viewonly.title": "Andere sehen lassen",
    "scriptShare.tab.viewonly.linkTitle": "Teilbarer Nur-Ansichts-Link",
    "scriptShare.tab.viewonly.shareCurrent": "Aktuelle Version teilen",
    "scriptShare.tab.viewonly.shareFuture": "Zukünftige Änderungen teilen",
    "scriptShare.tab.viewonly.otherUsers": "Nur-Ansichts-Skript an andere Benutzer senden",
    "scriptShare.tab.viewonly.usersPlaceholder": "Gib die Benutzer-IDs ein, getrennt durch Leerzeichen.",
    "scriptShare.tab.collab.title": "Andere bearbeiten lassen",
    "scriptShare.tab.collab.addRemove": "Mitwirkende hinzufügen oder entfernen",
    "scriptShare.tab.embed.title": "Ein eingebettetes Skript teilen",
    "scriptShare.tab.embed.linkTitle": "Einbettbarer IFrame-Code",
    "scriptShare.tab.embed.showCode": "Code anzeigen:",
    "scriptShare.tab.embed.showDAW": "DAW anzeigen:",
    "scriptShare.copyClipboard": "In Zwischenablage kopieren",
    "soundUploader.title": "Einen neuen Sound hinzufügen",
    "soundUploader.title.upload": "Sound hochladen",
    "soundUploader.title.record": "Schnellaufnahme",
    "soundUploader.file.prompt": "Datei auswählen...",
    "soundUploader.constantRequired": "Name der Konstante (erforderlich)",
    "soundUploader.tempoOptional": "Tempo (optional)",
    "soundUploader.constantPlaceholder.synth": "z.B. MYSYNTH_01",
    "soundUploader.constantPlaceholder.recording": "z.B. MYRECORDING_01",
    "soundUploader.constantPlaceholder.sound": "e.g. MYSOUND_01",
    "soundUploader.record.measures.title": "Messungskontrolle",
    "soundUploader.record.measures.metronomeClick": "Klicke während der Aufnahme",
    "soundUploader.record.measures.tempo": "Tempo (beats per minute)",
    "soundUploader.record.measures.countoff": "Einzähl-Maßnahmen",
    "soundUploader.record.measures.toRecord": "Maßnahmen zum Aufzeichnen",
    "soundUploader.record.prompt": "Sound aufnehmen",
    "soundUploader.record.getReady": "Mach dich bereit!",
    "metronome": "Metronom",
    "clear": "Leeren",
    "soundUploader.record.mic.waiting": "Auf Mikrofonzugriff warten...",
    "soundUploader.record.mic.reenable": "Mikrofon aktivieren und hier klicken, um es erneut zu versuchen.",
    "soundUploader.record.firefoxMacError": "Entschuldigung, die Aufnahme in EarSketch funktioniert derzeit nicht in Firefox auf Mac. Bitte verwende Chrome oder Safari.",
    "soundUploader.freesound.description": "ist eine Online-Datenbank mit Tausenden von kostenlosen Audioclips, darunter alles von Musik bis hin zu Feldaufnahmen, die alle unter Creative-Commons-Lizenzen stehen. Du kannst auf Freesound nach Clips suchen und sie unten in EarSketch speichern.",
    "soundUploader.freesound.searching": "Freesound wird gesucht...",
    "soundUploader.freesound.uploadedBy": "Hochgeladen von Freesound-Benutzer {{userName}}",
    "formattedTime.justNow": "just now",
    "formattedTime.recently": "kürzlich",
    "formattedTime.minutesAgo": "vor 1 Minute",
    "formattedTime.minutesAgo_plural": "vor {{count}} Minuten",
    "formattedTime.hoursAgo": "vor 1 Stunde",
    "formattedTime.hoursAgo_plural": "vor {{count}} Stunden",
    "formattedTime.daysAgo": "gestern",
    "formattedTime.daysAgo_plural": "vor {{count}} Tagen",
    "formattedTime.weeksAgo": "letzte Woche",
    "formattedTime.weeksAgo_plural": "vor {{count}} Wochen",
    "formattedTime.monthsAgo": "letzten Monat",
    "formattedTime.monthsAgo_plural": "vor {{count}} Monaten",
    "formattedTime.yearsAgo": "letztes Jahr",
    "formattedTime.yearsAgo_plural": "vor {{count}} Jahren",
    "curriculum.title": "Kursplan",
    "curriculum.switchScriptLanguage": "Skriptsprache ändern",
    "curriculum.showTOC": "Inhaltsverzeichnis anzeigen",
    "curriculum.toc": "Inhaltsverzeichnis",
    "curriculum.open": "Kursplan öffnen",
    "curriculum.close": "Kursplan schließen",
    "curriculum.previousPage": "Vorherige Seite",
    "curriculum.nextPage": "Nächste Seite",
    "curriculum.copyURL": "Kursplan-URL kopieren",
    "curriculum.expandUnitDescriptive": "Einheit ausklappen: {{title}}",
    "curriculum.collapseUnit": "Einheit einklappen",
    "curriculum.expandUnit": "Einheit aufklappen",
    "curriculum.collapseUnitDescriptive": "Einheit einklappen: {{title}}",
    "curriculum.expandChapterDescriptive": "Kapitel aufklappen: {{title}}",
    "curriculum.collapseChapterDescriptive": "Kapitel einklappen: {{title}}",
    "curriculum.expandChapter": "Kapitel ausklappen",
    "curriculum.collapseChapter": "Kapitel einklappen",
    "curriculum.openSection": "Abschnitt öffnen: {{section}}: ",
    "curriculum.closeSection": "Abschnitt schließen: {{section}}: ",
    "shortcuts.run": "Skript ausführen",
    "shortcuts.save": "Skript speichern",
    "shortcuts.undo": "Rückgängig",
    "shortcuts.redo": "Wiederherstellen",
    "shortcuts.comment": "Code kommentieren",
    "shortcuts.autocomplete": "Automatische Vervollständigung",
    "shortcuts.zoomHorizontal": "Zoomen (Horizontal)",
    "shortcuts.zoomVertical": "Zoomen (Vertikal)",
    "shortcuts.escapeEditor": "Editor-Fokus verlassen",
    "hardware.ctrl": "Strg",
    "hardware.cmd": "Cmd",
    "hardware.shift": "Shift",
    "hardware.alt": "Alt",
    "hardware.option": "Option",
    "hardware.enter": "Enter",
    "hardware.space": "Leerzeichen",
    "hardware.wheel": "Mausrad",
    "hardware.esc": "Esc",
    "hardware.tab": "Tab",
    "errorReport.header": "Fehler melden"
  },
  "ariaDescriptors": {
    "api.closeFunctionDetails": "{{functionName}} Funktionsdetails schließen",
    "api.openFunctionDetails": "{{functionName}} Funktionsdetails öffnen",
    "contentManager.close": "Content-Manager schließen",
    "contentManager.scriptName": "Skriptname",
    "curriculum.switchScriptLanguage": "Skriptsprache zu {{language}} wechseln",
    "daw.horizontalScroll": "Horizontales Scrollen",
    "daw.horizontalZoomIn": "Horizontales Hinzoomen",
    "daw.horizontalZoomOut": "Horizontales Rauszoomen",
    "daw.verticalScroll": "Vertikales Scrollen",
    "daw.verticalZoomIn": "Vertikales Hinzoomen",
    "daw.verticalZoomOut": "Vertikales Rauszoomen",
    "editor.redoEditDisabled": "Wiederherstellen deaktiviert",
    "editor.undoEditDisabled": "Rückgängig deaktiviert",
    "editor.settings": "Editor Einstellungen",
    "general.openPanel": "{{panelName}} öffnen",
    "general.selected": "Ausgewählt",
    "general.notSelected": "Nicht ausgewählt",
    "header.fontSize": "Schriftgröße auswählen",
    "header.selectLanguage": "Sprache auswählen",
    "header.settings": "Einstellungen und zusätzliche Optionen",
    "header.shortcuts": "Tastaturkürzel ein-/ausblenden",
    "header.toggleNotifications": "Benachrichtigungen ein-/ausblenden",
    "header.unreadNotifications": "Du hast {{numUnread}} ungelesene Benachrichtigungen",
    "scriptBrowser.close": "{{scriptname}} schließen",
    "scriptBrowser.delete": "{{scriptname}} löschen",
    "scriptBrowser.download": "{{scriptname}} herunterladen",
    "scriptBrowser.import": "{{scriptname}} importieren",
    "scriptBrowser.open": "{{scriptname}} öffnen",
    "scriptBrowser.options": "Skriptoptionen für {{scriptname}}",
    "scriptBrowser.print": "{{scriptname}} drucken",
    "scriptBrowser.rename": "{{scriptname}} umbenennen",
    "scriptBrowser.restore": "{{scriptname}} wiederherstellen",
    "scriptBrowser.share": "{{scriptname}} teilen",
    "sounds.clearFilter": "Sound-Browsersuche und -Filter löschen",
    "sounds.paste": "{{name}} in den Code-Editor einfügen",
    "sounds.preview": "Preview sound {{name}}",
    "skipLink.contentManager": "Zum Content Manager springen",
    "skipLink.curriculum": "Zum Kursplan springen",
    "skipLink.daw": "Zur Digital Audio Workstation springen",
    "skipLink.editor": "Zum Code-Editor springen",
    "skipLink.navigation": "Zur Navigation springen",
    "sounds.artistFilter": "Wähle einen oder mehrere Künstler zum Filtern aus",
    "sounds.genreFilter": "Wähle einen oder mehrere Genres zum Filtern aus",
    "sounds.instrumentFilter": "Wähle einen oder mehrere Instrumente zum Filtern aus",
    "sounds.keyFilter": "Wähle einen oder mehrere Schlüsselsignaturen zum Filtern aus"
  },
  "bubble": {
    "userLanguage": "Sprache",
    "script.name": "Schnelltour",
    "selectLanguage": "Programmiersprache wählen",
    "defaultProgrammingLanguage": "Programmiersprache wählen",
    "dialogTitle": "Schnelltour Seite {{page}} von {{total}}",
    "screenreaderIntro": "Please note, all 9 steps of the EarSketch tour are listed below in an unordered list. Select the \"$t(bubble:buttons.close)\" button when you are ready to use EarSketch.",
    "screenreaderCloseTour": "Bitte beachten: Um die Tour zu einem beliebigen Zeitpunkt zu schließen, wähle den \"$t(bubble:buttons.close)\"-Button.",
    "buttons": {
      "skip": "Überspringen",
      "skipTour": "Tour überspringen",
      "start": "Starten",
      "close": "Tour beenden",
      "next": "Weiter"
    },
    "header": {
      "start": "Willkommen bei EarSketch!",
      "codeEditor": "1/8 Den Code-Editor erkunden",
      "runCode": "2/8 Ausführen deines Codes",
      "previewMusic": "3/8 Vorschau deiner Musik",
      "playMusic": "4/8 Wiedergabe deiner Musik",
      "exploreCode": "5/8 Deinen Code erkunden",
      "addSounds": "6/8 Sounds zu deinem Code hinzufügen",
      "saveCode": "7/8 Deinen Code speichern",
      "readCurriculum": "8/8 Den Kursplan lesen",
      "end": "Fertig"
    },
    "body": {
      "start": "Bist du bereit, mit dem Programmieren und Komponieren zu beginnen? Wenn du zum ersten Mal mit EarSketch arbeitest, klicke unten auf <span class=\"border-2 border-black rounded-full px-1 bg-black text-white font-thin\">Start</span>, um einen kurzen Überblick über die EarSketch-Oberfläche zu erhalten. \nWenn du ein erfahrener Benutzer bist, klicke auf <span class=\"border-2 border-black rounded-full px-1 font-normal\">Skip</span>, um mit dem Programmieren zu beginnen.<br><br> Die Nutzung von EarSketch ist gemäß den Bedingungen  <a href=\"https://earsketch.gatech.edu/landing/#/license\" target=\"_blank\" rel=\"noreferrer\"> unserer Lizenzvereinbarung kostenlos</a>.<br><br>\nDie Standardprogrammiersprache für diese Tour ist Python. Klicke unten, um zu JavaScript zu wechseln.",
      "codeEditor": "Der Code-Editor ist dein Arbeitsbereich zum Komponieren von Musik. Er ist ein Text-Editor mit nummerierten Zeilen.",
      "runCode": "Führen Sie den Code aus, um Ihre Musik zu generieren. Klicken Sie auf den <span class=\"font-black text-green-600 text-lg\"><i class=\"align-middle icon icon-arrow-right22\"></i>RUN</span> Button und sehen Sie sich Ihre Anordnung in der Digital Audio Workstation oberhalb des Code-Editors an.",
      "previewMusic": "Die Digital Audio Workstation (DAW) visualisiert eine Zeitachse, die deinen Code in Sekunden und in Takten anzeigt. Unterhalb der Zeitachse werden die zu deinem Song hinzugefügten Audioclips auf Tracks platziert.",
      "playMusic": "Über die Schaltflächen oben rechts im DAW kannst du deine Musik hören. Du kannst dein Lied abspielen, indem du auf das grüne Dreieck <span class=\"align-middle icon icon-play4 text-green-600 text-lg\"></span> klickst.",
      "exploreCode": "Die Browser sind hier auf der linken Seite. Klicke auf den Schalter oben, um sie zu verbergen oder anzuzeigen. Es gibt mehrere Arten von Browsern, und wir werden jeden in den nächsten Schritten erkunden.",
      "addSounds": "Der erste Browser ist <span class=\"text-yellow-500 text-3xl align-middle icon icon-headphones\"></span> SOUNDS. Scrolle und klicke auf die Ordner, um mehr als 4.000 Audioclips zu entdecken, die du in deiner Musik verwenden kannst und die von bekannten Künstlerinnen und Künstlern komponiert wurden.",
      "saveCode": "Dein Code wird automatisch in <span class=\"text-yellow-500 text-lg align-middle icon icon-embed2\"></span> SCRIPTS gespeichert. Im Skriptmenü <span class=\"icon-menu3 text-lg px-1 align-middle\"></span> kannst du deine Musik als Audiodatei herunterladen.",
      "readCurriculum": "Auf der rechten Seite befindet sich der Kursplanbereich. Verwende den Umschalter, um den Kursplan anzuzeigen, und die Willkommensleiste, um durch den Inhalt zu navigieren.",
      "end": "Glückwunsch! Du hast die Tour abgeschlossen und bist nun bereit, Musik zu machen. Klicke auf <span class=\"align-middle icon icon-plus2\"></span>, um ein neues Skript zu öffnen und mit dem Programmieren zu beginnen."
    }
  },
  "messages": {
    "confirm": {
      "deletescript": "Gelöschte Skripte verschwinden aus der Liste der Skripte und können unter „Gelöschte Skripte“ wiederhergestellt werden.",
      "deleteSharedScript": "Bist du sicher, dass du das freigegebene Skript „{{scriptName}}“ löschen möchtest?",
      "deleteSound": "Möchtest du den Sound „{{soundName}}“ wirklich löschen?",
      "leaveCollaboration": "Möchtest du die Zusammenarbeit in \"{{scriptName}} \" verlassen?"
    },
    "interpreter": {
      "runSuccess": "Skript erfolgreich ausgeführt! Klicke auf den Play-Button, um deine Musik zu hören.",
      "runFailed": "Es gibt einen oder mehrere Fehler in deinem Skript. Wirf einen Blick in die Konsole für Details.",
      "noimport": " ist undefiniert. Möglicherweise fehlt \"from earsketch import *\"."
    },
    "dawservice": {
      "effecttrackwarning": "Hinzufügen einer Effektspur, bevor die Audiospur erstellt wird"
    },
    "esaudio": {
      "stringindex": "Beat string index ist außerhalb der Grenzen",
      "nonlistRangeError": "beat strings dürfen nur 0, + oder - enthalten",
      "tempoRange": " Das Tempo muss zwischen 45 und 220 bpm liegen",
      "analysisTimeTooShort": "Das Analysezeitfenster (endTime - startTime) ist zu klein"
    },
    "user": {
      "scriptcloud": "Skript erfolgreich in der Cloud gespeichert.",
      "allscriptscloud": "Alle nicht gespeicherten Skripte wurden erfolgreich in der Cloud gespeichert.",
      "badsharelink": "Fehler beim Öffnen eines Skripts. Der Freigabelink in der URL ist möglicherweise falsch.",
      "scriptcopied": "Skript erfolgreich kopiert.",
      "emailConflict": "Die Aktualisierung des Benutzerprofils ist fehlgeschlagen. Stelle bitte sicher, dass diese E-Mail-Adresse nicht in einem anderen EarSketch-Konto verwendet wird (Tipp: Wenn du dich nicht an ein solches Benutzerkonto erinnern kannst, versuche dich abzumelden und wähle die Option Konto zurücksetzen -> Passwort vergessen. Damit kannst du das mit der E-Mail-Adresse verknüpfte Konto wiederherstellen)."
    },
    "download": {
      "script": "Deinen Code als Textdatei auf deinem Computer speichern.",
      "wav": "Deinen Song als WAV-Audiodatei speichern (benötigt mehr Speicherplatz, hat dafür eine höhere Audioqualität).",
      "mp3": "Deinen Song als MP3-Datei speichern (benötigt weniger Speicherplatz, hat dafür eine geringere Audioqualität).",
      "multitrack": "Jede Spur deines Songs als separate WAV-Datei speichern (zum Importieren in ein DAW-Programm wie GarageBand, Logic, Pro Tools, Reaper, FL Studio, Cubase, Audition oder Live).",
      "compileerror": "Skript konnte nicht erfolgreich kompiliert werden.",
      "emptyerror": "Song ist leer!",
      "rendererror": "Es gab ein Problem beim Rendern des Skripts."
    },
    "changepassword": {
      "pwdauth": "Old password wrong. Password could not be changed.",
      "pwdfail": "Your password confirmation is not the same as your password.",
      "pwdlength": "Your password is too short. Passwords must be at least 5 characters long.",
      "commerror": "Communication error ...",
      "commerror2": "Communication error ..."
    },
    "downloadprotecteddata": {
      "nopassword": "Please enter the password.",
      "servertimeout": "The was some problem at our end. Please try again.",
      "unexpectederror": "Unexpected error. Please try again or report error from the options menu."
    },
    "forgotpassword": {
      "fail": "The email address you entered is not valid or is not associated with an EarSketch account.",
      "success": "Please check your e-mail for a message from EarSketch to reset your password."
    },
    "uploadcontroller": {
      "freesoundSelection": "Please select a sound from the Freesound search results...",
      "userAuth": "Not authenticated User ...",
      "wavsel": "Please select a valid audio file ...",
      "invalidfile": " is not a valid audio file ...",
      "undefinedconstant": "Undefined is not a valid constant...",
      "alreadyused": " is already used as a constant",
      "invalidconstant": " is not valid constant...",
      "tempointeger": "Tempo must be a positive number...",
      "bigsize": " Sorry, the audio file cannot be longer than 30 seconds.",
      "timeout": "Timeout Communication Error Uploading Sound ...",
      "uploadsuccess": "Success uploading custom sound",
      "commerror": "Communication Error uploading sound ...",
      "commerror2": "Communication Error uploading sound ...",
      "chrome_mic_noaccess": "You have blocked access to your microphone. To enable recording, click the 'i' icon in your browser's address bar and select 'Allow' next to 'Microphone'. Then, try again.",
      "ff_mic_noaccess": "You have blocked access to your microphone. To enable recording, click the microphone icon in your browser's address bar to share your microphone with EarSketch. Then, try again.",
      "mic_noaccess": "You have blocked access to your microphone. To enable recording, unblock mic access in your browser's settings. Then, try again."
    },
    "createaccount": {
      "pwdfail": "Your password confirmation is not the same as your password.",
      "useralreadyexists": "Provided username or email already exists. Please try 'Forgot Password' feature if you cannot access your account.",
      "commerror": "Communication error ...",
      "usernameconstraint": "Usernames must not start with a number and cannot include spaces or special characters"
    },
    "general": {
      "unauthenticated": "Please login before using this feature...",
      "loginsuccess": "Login successful",
      "loginfailure": "Your username or password is incorrect. Please try logging in again or register a new account.",
      "complexitySyntaxError": "Failed to run the code indicator. There might be a syntax error in your code.",
      "soundrenamed": "Successfully renamed sound",
      "renameSoundEmpty": "Sound name cannot be empty (or only contain \"_\")!",
      "renameSoundSpecialChar": "Removing special characters in the renaming process...",
      "renameSoundConflict": "Sound name already in use",
      "shortname": "Please provide a name that is at least 3 characters long.",
      "illegalCharacterInUserID": "Please use only regular characters, numbers, or _ in the user ID.",
      "userDoesNotExist": "That user ID does not exist.",
      "noSelfShare": "You cannot share scripts with yourself!"
    },
    "idecontroller": {
      "running": "Running script...",
      "success": "Script ran successfully",
      "overwrite": "That name already exists. Please provide a unique name or first rename the existing script.",
      "overwriteDeleted": "That name already exists in your deleted scripts. Please provide a unique name or restore the deleted script and rename it.",
      "illegalname": "Bitte verwende in Dateinamen nur reguläre Zeichen, Zahlen oder „_“ (Unterstrich).",
      "savefailed": "Das Skript konnte nicht in der Cloud gespeichert werden. Bitte speichere dein Skript offline, um den Verlust von Änderungen zu vermeiden.",
      "blocksError": "Could not enter blocks mode: {{error}}",
      "saveallfailed": "Some scripts could not be saved to the cloud. Please save your changes offline to avoid losing them.",
      "closealltabs": "This will close all open tabs. Are you sure you want to proceed?"
    },
    "shareScript": {
      "menuDescriptions": {
        "viewOnly": "I want someone to see my script. (They cannot edit.)",
        "collaboration": "I want someone to be able to edit my script.",
        "embedded": "I want to be able to embed my song on a website."
      },
      "sharedViewOnly": "Shared {{scriptName}} as view-only with "
    }
  },
  "api": {
    "noparams": "No Parameters",
    "parameters": "Parameters",
    "returnValue": "Return Value",
    "pasteToCodeEditor": "Paste {{name}} function into code editor",
    "example": "Example",
    "defaultValue": "Default Value",
    "open": "Open",
    "close": "Close",
    "types": {
      "soundConstant": "Sound Constant",
      "analysisConstant": "Analysis Constant",
      "folderConstant": "Folder Constant",
      "effectConstant": "Effect Constant",
      "effectParameterConstant": "Effect Parameter Constant",
      "float": "Float",
      "floatOptional": "Float, Optional",
      "array": "Array",
      "integer": "Integer",
      "integerOptional": "Integer, Optional",
      "listArray": "List (Python), Array (JavaScript)",
      "list": "List",
      "string": "String",
      "stringOptional": "String, Optional",
      "stringNumberList": "String/Number/List",
      "any": "Any type",
      "booleanOptional": "Boolean, Optional",
      "soundOrList": "Sound Constant or List/array"
    },
    "analyze": {
      "description": "This function analyzes a sound for the specified feature.",
      "parameters": {
        "sound": {
          "description": "Sound to analyze. Typically this is a constant from the sound browser."
        },
        "feature": {
          "description": "Analysis feature constant. The analysis functions currently support two features: RMS_AMPLITUDE analyzes how loud the sound is and SPECTRAL_CENTROID analyzes how bright the sound is."
        }
      },
      "returns": {
        "description": "Result of the calculation for the specified feature (always between 0 and 1 inclusive)."
      },
      "example": {
        "python": "# Spectral centroid of a sound\ncentroid = analyze(HOUSE_BREAKBEAT_001, SPECTRAL_CENTROID)",
        "javascript": "// Spectral centroid of a sound\nvar centroid = analyze(HOUSE_BREAKBEAT_001, SPECTRAL_CENTROID);"
      }
    },
    "analyzeForTime": {
      "description": "This function analyzes a sound for the specified feature, for the specified start and end times.",
      "parameters": {
        "sound": {
          "description": "Sound to analyze. Typically this is a constant from the sound browser."
        },
        "feature": {
          "description": "Analysis feature constant. The analysis functions currently support two features: RMS_AMPLITUDE analyzes how loud the sound is and SPECTRAL_CENTROID analyzes how bright the sound is."
        },
        "sliceStart": {
          "description": "Start location within the sound to begin analysis"
        },
        "sliceEnd": {
          "description": "End location within the sound to end analysis"
        }
      },
      "returns": {
        "description": "Result of the calculation for the specified feature (always between 0 and 1 inclusive)."
      },
      "example": {
        "python": "# Spectral centroid for part of a sound\nsound = HOUSE_BREAKBEAT_001\ncentroid = analyzeForTime(sound, SPECTRAL_CENTROID, 1.25, 1.5)",
        "javascript": "// Spectral centroid for part of a sound\nvar sound = HOUSE_BREAKBEAT_001;\nvar centroid = analyzeForTime(sound, SPECTRAL_CENTROID, 1.25, 1.5);"
      }
    },
    "analyzeTrack": {
      "description": "This function analyzes an entire track for the specified feature.",
      "parameters": {
        "track": {
          "description": "Track number to analyze."
        },
        "feature": {
          "description": "Analysis feature constant. The analysis functions currently support two features: RMS_AMPLITUDE analyzes how loud the sound is and SPECTRAL_CENTROID analyzes how bright the sound is."
        }
      },
      "returns": {
        "description": "Result of the calculation for the specified feature (always between 0 and 1 inclusive)."
      },
      "example": {
        "python": "# Spectral centroid of a track\nfitMedia(HOUSE_BREAKBEAT_001, 1, 1, 3)\ncentroid = analyzeTrack(1, SPECTRAL_CENTROID)",
        "javascript": "// Spectral centroid of a track\nfitMedia(HOUSE_BREAKBEAT_001, 1, 1, 3);\nvar centroid = analyzeTrack(1, SPECTRAL_CENTROID);"
      }
    },
    "analyzeTrackForTime": {
      "description": "This function analyzes a specified track between a start and end time.",
      "parameters": {
        "track": {
          "description": "Track number to analyze."
        },
        "feature": {
          "description": "Analysis feature constant. The analysis functions currently support two features: RMS_AMPLITUDE analyzes how loud the sound is and SPECTRAL_CENTROID analyzes how bright the sound is."
        },
        "start": {
          "description": "Start location within the track to begin analysis"
        },
        "end": {
          "description": "End location within the track to end analysis"
        }
      },
      "returns": {
        "description": "Result of the calculation for the specified feature (always between 0 and 1 inclusive)."
      },
      "example": {
        "python": "# Spectral centroid for part of a track\nfitMedia(HOUSE_BREAKBEAT_001, 1, 1, 3)\ncentroid = analyzeTrackForTime(1, SPECTRAL_CENTROID, 1.25, 1.5)",
        "javascript": "// Spectral centroid for part of a track\nfitMedia(HOUSE_BREAKBEAT_001, 1, 1, 3);\nvar centroid = analyzeTrackForTime(1, SPECTRAL_CENTROID, 1.25, 1.5);"
      }
    },
    "createAudioSlice": {
      "description": "Returns a sound constant that represents a slice of another sound.",
      "parameters": {
        "sound": {
          "description": "The sound from which to create a slice. This is a constant from the sound browser."
        },
        "sliceStart": {
          "description": "The start position of the slice."
        },
        "sliceEnd": {
          "description": "The end position of the slice."
        }
      },
      "returns": {
        "description": "A new sound constant representing a slice of audio."
      },
      "example": {
        "python": "# Extract part of a sound\nsound = HOUSE_BREAKBEAT_001\nslice = createAudioSlice(sound, 1.5, 2.5)\nfitMedia(slice, 1, 1, 3)",
        "javascript": "// Extract part of a sound\nvar sound = HOUSE_BREAKBEAT_001;\nvar slice = createAudioSlice(sound, 1.5, 2.5);\nfitMedia(slice, 1, 1, 3);"
      }
    },
    "createAudioStretch": {
      "description": "Returns a sound constant that represents a sound timestretched from its original tempo.",
      "parameters": {
        "sound": {
          "description": "The sound from which to create the timestretched sound. This is a constant from the sound browser."
        },
        "stretchFactor": {
          "description": "How much to timestretch the sound. Here \"2\" means \"twice as long\"."
        }
      },
      "returns": {
        "description": "A new sound constant representing the timestretched audio."
      },
      "example": {
        "python": "# Stretch the sound to be twice as long\nsound = RD_ROCK_POPRHYTHM_MAINDRUMS_4\nstretched = createAudioStretch(sound, 2)\nfitMedia(stretched, 1, 1, 9)",
        "javascript": "// Stretch the sound to be twice as long\nvar sound = RD_ROCK_POPRHYTHM_MAINDRUMS_4;\nvar stretched = createAudioStretch(sound, 2);\nfitMedia(stretched, 1, 1, 9);"
      }
    },
    "dur": {
      "description": "Returns the duration of a sound in measures.",
      "parameters": {
        "sound": {
          "description": "The sound whose duration to return. Typically, this is a constant from the sound browser."
        }
      },
      "returns": {
        "description": "The duration in measures."
      },
      "example": {
        "python": "duration = dur(HOUSE_BREAKBEAT_001)",
        "javascript": "var duration = dur(HOUSE_BREAKBEAT_001);"
      }
    },
    "finish": {
      "description": "This function can optionally be called at the end of the script (in previous versions of EarSketch this was required).",
      "example": {
        "python": "# Rest of script above this line...\nfinish()",
        "javascript": "// Rest of script above this line...\nfinish();"
      }
    },
    "fitMedia": {
      "description": "Adds a sound to a specified track at specified start and end times. The sound will be repeated or cut short as needed to fill the specified amount of time.",
      "parameters": {
        "sound": {
          "description": "Sound to place on track. Typically this is a constant from the sound browser"
        },
        "track": {
          "description": "Track number to insert sound onto"
        },
        "start": {
          "description": "Location within the track where the sound will begin (e.g. 1 will start at the beginning of measure 1)."
        },
        "end": {
          "description": "Location within the track where the sound will end (e.g. 5 will stop the sound at the beginning of measure 5)."
        }
      },
      "example": {
        "python": "# Add a sound to a track, repeating or trimming as necessary\n# Here it repeats from measure 2 to the start of measure 9\nfitMedia(HIPHOP_FUNKBEAT_001, 1, 2, 9)",
        "javascript": "// Add a sound to a track, repeating or trimming as necessary\n// Here it repeats from measure 2 to the start of measure 9\nfitMedia(HIPHOP_FUNKBEAT_001, 1, 2, 9);"
      }
    },
    "importImage": {
      "description": "This function retrieves an image from the web and converts it into a two-dimensional array/list of grayscale values or a three-dimensional list of RGB color values, scaled to the specified number of rows and columns.",
      "parameters": {
        "url": {
          "description": "The URL at which the image is located"
        },
        "nrows": {
          "description": "The number of rows of pixel data to return (the image will be scaled to match this number of rows)"
        },
        "ncols": {
          "description": "The number of columns of pixel data to return (the image will be scaled to match this number of columns)"
        },
        "includeRGB": {
          "default": "False",
          "description": "If false, returns a two-dimensional grayscale list. If true, returns a three-dimensional RGB color pixel list, with the third dimension being for R, G, and B, respectively."
        }
      },
      "returns": {
        "description": "Multidimensional list of integers (0-255) representing pixels."
      },
      "example": {
        "python": "# Turn an image into a 10x10 grayscale list\nurl = \"https://cdn.pixabay.com/photo/2012/04/05/01/17/ear-25595_640.png\"\npixelData = importImage(url, 10, 10, False)",
        "javascript": "// Turn an image into a 10x10 grayscale list\nvar url = \"https://cdn.pixabay.com/photo/2012/04/05/01/17/ear-25595_640.png\";\nvar pixelData = importImage(url, 10, 10, false);"
      }
    },
    "importFile": {
      "description": "This function retrieves a file from the web and returns its contents as a string.",
      "parameters": {
        "url": {
          "description": "The URL at which the file is located"
        }
      },
      "returns": {
        "description": "File contents as string."
      },
      "example": {
        "python": "# Load a file via URL\nfileData = importFile(\"https://www.w3.org/TR/PNG/iso_8859-1.txt\")",
        "javascript": "// Load a file via URL\nvar fileData = importFile(\"https://www.w3.org/TR/PNG/iso_8859-1.txt\");"
      }
    },
    "init": {
      "description": "This function can optionally be called at the start of the script (in previous versions of EarSketch this was required).",
      "example": {
        "python": "init()\n# Rest of script below this line...",
        "javascript": "init();\n// Rest of script below this line..."
      }
    },
    "insertMedia": {
      "description": "Inserts the entire media file onto a specified track at the specified starting time.",
      "parameters": {
        "sound": {
          "description": "Sound to insert on track. Typically this is a constant from the sound browser"
        },
        "track": {
          "description": "Track number to insert sound onto"
        },
        "start": {
          "description": "The location within the track at which to start playback of the sound. (The sound will play through one time, so the end time depends on the length of the sound.)"
        }
      },
      "example": {
        "python": "# Add a sound on track 1, measure 2, beat 3\ninsertMedia(HOUSE_BREAKBEAT_003, 1, 2.5)",
        "javascript": "// Add a sound on track 1, measure 2, beat 3\ninsertMedia(HOUSE_BREAKBEAT_003, 1, 2.5);"
      }
    },
    "insertMediaSection": {
      "description": "Inserts a part of a sound on a specified track at a specified location.",
      "parameters": {
        "sound": {
          "description": "Sound to insert on track. Typically this is a constant from the sound browser"
        },
        "track": {
          "description": "Track number to insert sound onto"
        },
        "start": {
          "description": "The location within the track at which to start playback of the sound file (e.g. 1 will start at the beginning of measure 1)"
        },
        "sliceStart": {
          "description": "Start location within the sound to include (e.g. 1.0 is the beginning of the sound and 2.0 is measure 2 of the sound)"
        },
        "sliceEnd": {
          "description": "End location within the sound to include (e.g. 2.0 is measure 2 of the sound)"
        }
      },
      "example": {
        "python": "# Add part of a sound to a track\nsound = RD_UK_HOUSE_WURLITZER_3\ninsertMediaSection(sound, 1, 1.5, 2.5, 3.0)",
        "javascript": "// Add part of a sound to a track\nvar sound = RD_UK_HOUSE_WURLITZER_3;\ninsertMediaSection(sound, 1, 1.5, 2.5, 3.0);"
      }
    },
    "makeBeat1": {
      "description": "Creates a rhythmic pattern through specifying a string of characters. This string of characters can be of ANY length. We recommend choosing string lengths in multiples of 16 (e.g. 16, 32, 64, etc.), because this creates pattern lengths that are aligned with measures (each measure is 16 characters long).",
      "parameters": {
        "sound": {
          "description": "A single sound or a list/array of sounds. Typically this is a constant from the sound browser"
        },
        "track": {
          "description": "Track to place pattern onto"
        },
        "start": {
          "description": "Location within the track to start pattern (e.g. 1 will start at the beginning of measure 1)"
        },
        "beat": {
          "description": "A string indicating the rhythmic pattern to play. \"0\" plays the sound for a sixteenth note. \"+\" ties (i.e. continues or sustains) the sound for an additional sixteenth note. \"-\" rests (i.e. creates silence) for a sixteenth note. If the first argument to makeBeat is a list/array of sounds, \"0\" through \"9\" and \"A\" through \"F\" will play the sound at that list/array index for a sixteenth note."
        }
      },
      "example": {
        "python": "# Remix sounds into a new beat\ns = HIPHOP_FUNKBEAT_001\nmakeBeat(s, 1, 1, \"0++-0---0---0---\")\ns = [Y01_HI_HATS_1, Y01_OPEN_HI_HATS_1]\nmakeBeat(s, 2, 1, \"--10--10--100010\")",
        "javascript": "// Remix sounds into a new beat\nvar s1 = HIPHOP_FUNKBEAT_001;\nmakeBeat(s1, 1, 1, \"0++-0---0---0---\");\nvar s2 = [Y01_HI_HATS_1, Y01_OPEN_HI_HATS_1];\nmakeBeat(s2, 2, 1, \"--10--10--100010\");\n"
      }
    },
    "makeBeat2": {
      "description": "Creates a rhythmic pattern through specifying a string of characters. This string of characters can be of ANY length. We recommend choosing string lengths in multiples of 16 (e.g. 16, 32, 64, etc.), because this creates pattern lengths that are aligned with measures (each measure is 16 characters long).",
      "parameters": {
        "sound": {
          "description": "A single sound or a list/array of sounds. Typically this is a constant from the sound browser"
        },
        "track": {
          "description": "Track to place pattern onto"
        },
        "start": {
          "description": "Location within the track to start pattern (e.g. 1 will start at the beginning of measure 1)"
        },
        "beat": {
          "description": "A string indicating the rhythmic pattern to play. \"0\" plays the sound for a sixteenth note. \"+\" ties (i.e. continues or sustains) the sound for an additional sixteenth note. \"-\" rests (i.e. creates silence) for a sixteenth note. If the first argument to makeBeat is a list/array of sounds, \"0\" through \"9\" and \"A\" through \"F\" will play the sound at that list/array index for a sixteenth note."
        },
        "stepsPerMeasure": {
          "description": "A number that specifies the length of time for a single character in your beat string. The default value of 16 results in one sixteenth note."
        }
      },
      "example": {
        "python": "# Bongo triplets\nmakeBeat(IRCA_OS_BONGO_HIGH_OPEN, 1, 1, \"000\", 3)\nmakeBeat(IRCA_OS_BONGO_LOW_OPEN, 2, 1, \"0000\", 4)",
        "javascript": "// Bongo triplets\nmakeBeat(IRCA_OS_BONGO_HIGH_OPEN, 1, 1, \"000\", 3);\nmakeBeat(IRCA_OS_BONGO_LOW_OPEN, 2, 1, \"0000\", 4);"
      }
    },
    "makeBeatSlice1": {
      "description": "Creates a rhythmic pattern through specifying a string of characters indicating the start position within a sound. Unlike makeBeat, which always plays sounds from the beginning, makeBeatSlice lets you create rhythms that combine many different slices of sound from the same sound.",
      "parameters": {
        "sound": {
          "description": "A single sound. Typically this is a constant from the sound browser"
        },
        "track": {
          "description": "Track to place pattern onto"
        },
        "start": {
          "description": "Location within the track to start pattern (e.g. 1 will start at the beginning of measure 1)"
        },
        "beat": {
          "description": "A string indicating the rhythmic pattern to play. \"0\" through \"9\" and \"A\" through \"F\" plays the sound at the location specified at the corresponding index of the beatNumber list/array for a sixteenth note. \"+\" ties (i.e. continues or sustains) the sound for an additional sixteenth note. \"-\" rests (i.e. creates silence) for a sixteenth note."
        },
        "sliceStarts": {
          "description": "A list/array of starting locations within the sound. For example, [1.0, 2.5] creates two time locations at measure 1 and measure 2.5 of the sound that can be referenced in the beat string by \"0\" and \"1\" respectively."
        }
      },
      "example": {
        "python": "# Slice and rearrange by sixteenth notes\ns = RD_RNB_MOOGLEAD_10\nslices = [1.0, 1.375, 1.25, 1.5, 2.0, 2.25]\nmakeBeatSlice(s, 1, 1, \"4--04-0-30-10+30\", slices)",
        "javascript": "// Slice and rearrange by sixteenth notes\nvar s = RD_RNB_MOOGLEAD_10;\nvar slices = [1.0, 1.375, 1.25, 1.5, 2.0, 2.25];\nmakeBeatSlice(s, 1, 1, \"4--04-0-30-10+30\", slices);"
      }
    },
    "makeBeatSlice2": {
      "description": "Creates a rhythmic pattern through specifying a string of characters indicating the start position within a sound. Unlike makeBeat, which always plays sounds from the beginning, makeBeatSlice lets you create rhythms that combine many different slices of sound from the same sound.",
      "parameters": {
        "sound": {
          "description": "A single sound. Typically this is a constant from the sound browser"
        },
        "track": {
          "description": "Track to place pattern onto"
        },
        "start": {
          "description": "Location within the track to start pattern (e.g. 1 will start at the beginning of measure 1)"
        },
        "beat": {
          "description": "A string indicating the rhythmic pattern to play. \"0\" through \"9\" and \"A\" through \"F\" plays the sound at the location specified at the corresponding index of the beatNumber list/array for a sixteenth note. \"+\" ties (i.e. continues or sustains) the sound for an additional sixteenth note. \"-\" rests (i.e. creates silence) for a sixteenth note."
        },
        "sliceStarts": {
          "description": "A list/array of starting locations within the sound. For example, [1.0, 2.5] creates two time locations at measure 1 and measure 2.5 of the sound that can be referenced in the beat string by \"0\" and \"1\" respectively."
        },
        "stepsPerMeasure": {
          "description": "A number that specifies the length of time for a single character in your beat string. The default value of 16 results in one sixteenth note."
        }
      },
      "example": {
        "python": "# Slice and rearrange by eighth notes\nsound = HIPHOP_TRAPHOP_BEAT_002\neighths = [1.0, 1.125, 1.25, 1.375, 1.5, 1.625, 1.75, 1.875]\nbeat = \"01261264\"\nmakeBeatSlice(sound, 1, 1, beat, eighths, 8)",
        "javascript": "// Slice and rearrange by eighth notes\nvar sound = HIPHOP_TRAPHOP_BEAT_002;\nvar eighths = [1.0, 1.125, 1.25, 1.375, 1.5, 1.625, 1.75, 1.875];\nvar beat = \"01261264\";\nmakeBeatSlice(sound, 1, 1, beat, eighths, 8);"
      }
    },
    "print": {
      "description": "Displays the input in the console.",
      "parameters": {
        "input": {
          "description": "Value(s) to print"
        }
      },
      "example": {
        "python": "print(1 + 2)\nprint(\"hello!\")"
      }
    },
    "println": {
      "description": "Displays the input in the console.",
      "parameters": {
        "input": {
          "description": "Value(s) to print"
        }
      },
      "example": {
        "javascript": "println(1 + 2);\nprintln(\"hello!\");"
      }
    },
    "readInput": {
      "description": "Use this function to prompt a user for input.",
      "parameters": {
        "prompt": {
          "description": "A prompt to provide the user when asking for input."
        }
      },
      "returns": {
        "description": "The result of the user input."
      },
      "example": {
        "python": "# User-provided beat string\nbeat = readInput(\"Enter a beat, like 0-0-0\")\nmakeBeat(OS_CLAP01, 1, 1, beat)",
        "javascript": "// User-provided beat string\nvar beat = readInput(\"Enter a beat, like 0-0-0\");\nmakeBeat(OS_CLAP01, 1, 1, beat);"
      }
    },
    "replaceListElement": {
      "description": "Replace all occurrences of a list/array element with a new element.",
      "parameters": {
        "list": {
          "description": "Original list/array"
        },
        "elementToReplace": {
          "description": "Element of the list to replace."
        },
        "withElement": {
          "description": "New element that will replace all occurrences of elementToReplace."
        }
      },
      "example": {
        "python": "# Replace OS_SNARE01 wth OS_CLAP01\nsounds = [OS_KICK01, OS_SNARE01, OS_CLOSEDHAT01]\nreplaced = replaceListElement(sounds, OS_SNARE01, OS_CLAP01)",
        "javascript": "// Replace OS_SNARE01 wth OS_CLAP01\nvar sounds = [OS_KICK01, OS_SNARE01, OS_CLOSEDHAT01];\nvar replaced = replaceListElement(sounds, OS_SNARE01, OS_CLAP01);"
      }
    },
    "replaceString": {
      "description": "This function replaces all instances of a character in the original string with a new character.",
      "parameters": {
        "string": {
          "description": "Original string"
        },
        "characterToReplace": {
          "description": "Character in the original string to replace"
        },
        "withCharacter": {
          "description": "New character that will replace all occurrences of characterToReplace"
        }
      },
      "returns": {
        "description": "New string with appropriate character(s) replaced"
      },
      "example": {
        "python": "# Change all '0's to '1's\nbeat1 = \"0---0---0---0---\"\nbeat2 = replaceString(beat1, \"0\", \"1\")",
        "javascript": "// Change all '0's to '1's\nvar beat1 = \"0---0---0---0---\";\nvar beat2 = replaceString(beat1, \"0\", \"1\");"
      }
    },
    "reverseList": {
      "description": "Reverse the order of the elements of a list/array.",
      "parameters": {
        "list": {
          "description": "List/array to reverse"
        }
      },
      "returns": {
        "description": "A new list/array with the elements in reverse order"
      },
      "example": {
        "python": "# Reverse a list of sounds\nsounds = [OS_CLAP04, OS_COWBELL03, OS_LOWTOM02]\nreversed = reverseList(sounds)",
        "javascript": "// Reverse an array of sounds\nvar sounds = [OS_CLAP04, OS_COWBELL03, OS_LOWTOM02];\nvar reversed = reverseList(sounds);"
      }
    },
    "reverseString": {
      "description": "Reverse the order of characters in a string.",
      "parameters": {
        "string": {
          "description": "String to reverse"
        }
      },
      "returns": {
        "description": "A new string with the characters in reverse order"
      },
      "example": {
        "python": "# Reverse a beat string\nbeat = \"0+++0---0----000\"\nreversed = reverseString(beat)",
        "javascript": "// Reverse a beat string\nvar beat = \"0+++0---0----000\";\nvar reversed = reverseString(beat);"
      }
    },
    "rhythmEffects": {
      "description": "Creates a rhythmic effect envelope through specifying a string of characters.",
      "parameters": {
        "track": {
          "description": "Track to place pattern onto (or MIX_TRACK to apply it to all tracks)."
        },
        "effect": {
          "description": "Options: BANDPASS, CHORUS, COMPRESSOR, DELAY, DISTORTION, EQ3BAND, FILTER, FLANGER, PAN, PHASER, PITCHSHIFT, REVERB, RINGMOD, TREMOLO, VOLUME, or WAH."
        },
        "parameter": {
          "description": "Constant indicating which parameter of the effectType to create the envelope for. (See <a href='#' onclick='event.preventDefault(); loadCurriculumChapter(\"/en/v1/every-effect-explained-in-detail.html\")'>Every Effect Explained in Detail</a> in the curriculum sidebar for a complete list of effect parameters.)"
        },
        "values": {
          "description": "List/Array of effect parameter values (e.g. [0.0, 5.3, -12])."
        },
        "start": {
          "description": "Location within the track to start pattern (e.g. 1 will start at the beginning of measure 1)"
        },
        "beat": {
          "description": "A string indicating the effect pattern to create. Each character represents one \"step\" (default is a sixteenth note). Numbers 0 to 9 and then A to F indicate entries from the list/array (\"0\" represents the first value, \"1\" represents the second, \"A\" represents the eleventh, \"B\" represents the twelfth, etc). \"+\" ties (sustains/continues) the previous value. \"-\" ramps (creates a gradual change) from the previous to the next value."
        },
        "stepsPerMeasure": {
          "description": "A number that specifies the length of time of a single character in your beatString. The default value of 16 results in one sixteenth note."
        }
      },
      "example": {
        "python": "# Change the pitchshift over time\nfitMedia(DUBSTEP_BASS_WOBBLE_015, 1, 1, 3)\nrhythmEffects(1, PITCHSHIFT, PITCHSHIFT_SHIFT, [0, -12], 1, \"0---1++0\", 4)",
        "javascript": "// Change the pitchshift over time\nfitMedia(DUBSTEP_BASS_WOBBLE_015, 1, 1, 3);\nrhythmEffects(1, PITCHSHIFT, PITCHSHIFT_SHIFT, [0, -12], 1, \"0---1++0\", 4);"
      }
    },
    "selectRandomFile": {
      "description": "Selects a random sound from standard folders.",
      "parameters": {
        "folderSubstring": {
          "description": "Substring indicating which standard folders to pick a random sound from. Typically, this is part of a folder name (not a sound constant) from the sound browser."
        }
      },
      "returns": {
        "description": "A random Sound Constant from matching folders."
      },
      "example": {
        "python": "# Choose a random sound from a folder\nsound = selectRandomFile(ALT_POP_GUITAR)\nfitMedia(sound, 1, 1, 5)",
        "javascript": "// Choose a random sound from a folder\nvar sound = selectRandomFile(ALT_POP_GUITAR);\nfitMedia(sound, 1, 1, 5);"
      }
    },
    "setEffect1": {
      "description": "This function applies an effect to a specified track number and sets a parameter of that effect to a particular value for the entire track. For detailed information on all of the effects available to use with setEffect(), please see <a href='#' onclick='event.preventDefault(); loadCurriculumChapter(\"/en/v1/every-effect-explained-in-detail.html\")'>Every Effect Explained in Detail</a> in the curriculum.",
      "parameters": {
        "track": {
          "description": "Track to place effect onto (or MIX_TRACK to apply it to all tracks)"
        },
        "type": {
          "description": "Options: BANDPASS, CHORUS, COMPRESSOR, DELAY, DISTORTION, EQ3BAND, FILTER, FLANGER, PAN, PHASER, PITCHSHIFT, REVERB, RINGMOD, TREMOLO, VOLUME, or WAH"
        },
        "parameter": {
          "description": "Constant indicating which parameter of the effectType to create the envelope for. (See <a href='#' onclick='event.preventDefault(); loadCurriculumChapter(\"/en/v1/every-effect-explained-in-detail.html\")'>Every Effect Explained in Detail</a> in the curriculum sidebar for a complete list of effect parameters.)"
        },
        "value": {
          "description": "Value of effect parameter"
        }
      },
      "example": {
        "python": "# Apply a delay effect\nfitMedia(Y11_SNARE_1, 1, 1, 5)\nsetEffect(1, DELAY, DELAY_TIME, 145)",
        "javascript": "// Apply a delay effect\nfitMedia(Y11_SNARE_1, 1, 1, 5);\nsetEffect(1, DELAY, DELAY_TIME, 250);"
      }
    },
    "setEffect2": {
      "description": "This function applies an effect to a specified track number. Unlike the other version of setEffect(), there are additional arguments for setting an envelope that changes the value of an effect parameter over time. For detailed information on all of the effects available to use with setEffect(), please see the curriculum: <a href='#' onclick='event.preventDefault(); loadCurriculumChapter(\"/en/v1/every-effect-explained-in-detail.html\")'>Every Effect Explained in Detail</a>",
      "parameters": {
        "startValue": {
          "description": "Value of effect parameter at beginning of effect envelope"
        },
        "start": {
          "description": "Location within the track of the startValue"
        },
        "endValue": {
          "description": "Value of effect parameter at end of effect envelope"
        },
        "end": {
          "description": "Location within the track of the endValue"
        }
      },
      "example": {
        "python": "# Increase the filter frequency over time\nfitMedia(HOUSE_BREAK_FILL_001, 1, 1, 3)\nsetEffect(1, FILTER, FILTER_FREQ, 600, 1, 6000, 3)",
        "javascript": "// Increase the filter frequency over time\nfitMedia(HOUSE_BREAK_FILL_001, 1, 1, 3);\nsetEffect(1, FILTER, FILTER_FREQ, 600, 1, 6000, 3);"
      }
    },
    "setTempo1": {
      "description": "Sets the tempo for the project.",
      "parameters": {
        "tempo": {
          "description": "The project tempo in beats per minute (BPM). Minimum tempo is 45 BPM. Maximum tempo is 220 BPM."
        }
      },
      "example": {
        "python": "# Set the tempo to 110 BPM\nsetTempo(110)",
        "javascript": "// Set the tempo to 110 BPM\nsetTempo(110);"
      }
    },
    "setTempo2": {
      "description": "Change the tempo for a section of the project.",
      "parameters": {
        "startTempo": {
          "description": "Tempo at beginning of section in beats per minute (BPM)"
        },
        "start": {
          "description": "Measure where section begins"
        },
        "endTempo": {
          "description": "Tempo at end of section (if omitted, new tempo persists until next tempo point)"
        },
        "end": {
          "description": "Measure where section ends"
        }
      },
      "example": {
        "python": "# Set the tempo to 110 BPM at measure 2\nsetTempo(110, 2)\n# Ramp tempo from 80 to 140 BPM from measures 3 to 6\nsetTempo(80, 3, 140, 6)",
        "javascript": "// Set the tempo to 110 BPM at measure 2\nsetTempo(110, 2);\n// Ramp tempo from 80 to 140 BPM from measures 3 to 6\nsetTempo(80, 3, 140, 6);"
      }
    },
    "shuffleList": {
      "description": "Randomly rearrange the elements in a list/array.",
      "parameters": {
        "list": {
          "description": "List/array to shuffle"
        }
      },
      "returns": {
        "description": "A new list/array with the order of the list elements randomized."
      },
      "example": {
        "python": "# Shuffle a list of sounds\nsounds = [OS_CLAP04, OS_COWBELL03, OS_LOWTOM02]\nshuffled = shuffleList(sounds)",
        "javascript": "// Shuffle an array of sounds\nvar sounds = [OS_CLAP04, OS_COWBELL03, OS_LOWTOM02];\nvar shuffled = shuffleList(sounds);"
      }
    },
    "shuffleString": {
      "description": "Randomly rearrange the characters in a string.",
      "parameters": {
        "string": {
          "description": "String to shuffle"
        }
      },
      "returns": {
        "description": "A new string with the order of the characters randomized."
      },
      "example": {
        "python": "# Shuffle a beat string\nbeat = \"0-0-0-0-0-0-0-0-\"\nshuffled = shuffleString(beat)",
        "javascript": "// Shuffle a beat string\nvar beat = \"0-0-0-0-0-0-0-0-\";\nvar shuffled = shuffleString(beat);"
      }
    }
  },
  "templates": {
    "python": "# description: \nfrom earsketch import *\n\nsetTempo(120)\n",
    "javascript": "// description: \nsetTempo(120);\n"
  },
  "console": {
    "warning": "Warning",
    "error": "Error",
    "errors": {
      "AssertionError": "An assert statement failed",
      "AttributeError": "There is a mismatch between the object and the attribute",
      "ImportError": "The appropriate packages cannot be found or imported",
      "IndentationError": "There is an indentation error in the code (lack or extra spaces)",
      "IndexError": "There is an error using an out of range index",
      "KeyError": "There is an error using a dictionary key that does not exist",
      "NameError": "There is an error with a variable or function name that is not defined",
      "ParseError": "There is an error when reading the code",
      "SyntaxError": "There is an error with the syntax (or arrangement) of code",
      "TypeError": "There is an error with the expected data type",
      "TokenError": "There is an unexpected token error (extra or missing comma, space, or character) in the code",
      "ValueError": "A provided argument is not within the set or range of acceptable values for a function",
      "RangeError": "A provided argument is not within the set or range of acceptable values for a function",
      "ReferenceError": "There is an error with a variable or function name that is not defined",
      "NetworkError": "Please try running the code again. If the issue persists, check your internet connection or contact network administrator.",
      "ServerError": "Please try running the code again. If the issue persists, please report the issue using 'Report Error' in the information menu."
    }
  }
}
