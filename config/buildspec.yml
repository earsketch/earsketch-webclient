version: 0.2

env:
  parameter-store:
    NPM_BUILD_COMMAND: /earsketch-webclient/BuildConfig/$ES_BUILD_ENVIRONMENT/npm-build-command
    ENV_FLAGS_FILE: /earsketch-webclient/BuildConfig/$ES_BUILD_ENVIRONMENT/npm-env-flags-file
    ES_VERSION_MAJOR: /earsketch-webclient/version_number/major
    ES_VERSION_MINOR: /earsketch-webclient/version_number/minor
    ES_HOST: /earsketch-webclient/BuildConfig/$ES_BUILD_ENVIRONMENT/client_host
  secrets-manager:
    GITHUB_USER: Github_EarSketch_CICD_Credentials:github_user
    GITHUB_TOKEN: Github_EarSketch_CICD_Credentials:github_token

phases:
  pre_build:
    commands:
      - export ES_SCRIPT_HOME="$CODEBUILD_SRC_DIR/config/deployment-scripts"
      - export LOCAL_STAGING_DIR_NAME="${CODEBUILD_SOURCE_VERSION//\//-}"
      - export LOCAL_STAGING_DIR="$CODEBUILD_SRC_DIR/$LOCAL_STAGING_DIR_NAME"
      - export ES_VERSION="$ES_VERSION_MAJOR.$ES_VERSION_MINOR.$CODEBUILD_BUILD_NUMBER"
  build:
    commands:
      - start_time="$(date -u +%s)"
      - du -sh $CODEBUILD_SRC_DIR
      - echo $ES_SCRIPT_HOME
      - echo $CODEBUILD_SOURCE_VERSION
      - echo $LOCAL_STAGING_DIR
      - echo $ES_VERSION
      - echo $NPM_BUILD_COMMAND
      - echo $ENV_FLAGS_FILE
      - echo $ES_VERSION_MAJOR
      - echo $ES_VERSION_MINOR
      - echo Finished printing variables
      - echo "Entered the build phase..."
      - end_time="$(date -u +%s)" && elapsed="$(($end_time-$start_time))" && echo "Total of $elapsed seconds elapsed for build"
      - npm install
      - end_time="$(date -u +%s)" && elapsed="$(($end_time-$start_time))" && echo "Total of $elapsed seconds elapsed for build"
      - grunt less
      - end_time="$(date -u +%s)" && elapsed="$(($end_time-$start_time))" && echo "Total of $elapsed seconds elapsed for build"
      - npm run $NPM_BUILD_COMMAND -- --env.release=$ES_VERSION --env.flags=config/$ENV_FLAGS_FILE --env.host=$ES_HOST
      - end_time="$(date -u +%s)" && elapsed="$(($end_time-$start_time))" && echo "Total of $elapsed seconds elapsed for build"
      - mkdir $LOCAL_STAGING_DIR
      - echo "Copying the client files to local distribution folder..."
      - cp -r index.html sc.html sorry.html favicon.ico tunepadESLogin.html tpBody.html autograder/ autograder2/ autograder3/ css/ ExportToReaper/ fonts/ img/ scripts/ templates/ dist/ "$LOCAL_STAGING_DIR"
      # - python "$ES_SCRIPT_HOME/github_create_deployment.py" $GITHUB_USER $GITHUB_TOKEN $CODEBUILD_RESOLVED_SOURCE_VERSION $LOCAL_STAGING_DIR_NAME
  post_build:
    commands:
      - |
        if [ "$ES_BUILD_ENVIRONMENT" = "production" ]; 
        then
          echo "Tagging production build with version $ES_VERSION"
          python "$ES_SCRIPT_HOME/github_create_release.py" $GITHUB_USER $GITHUB_TOKEN $CODEBUILD_RESOLVED_SOURCE_VERSION $ES_VERSION
        else
          echo "Not applying git tag. Non-production environment: $ES_BUILD_ENVIRONMENT"
        fi
artifacts:
  files:
    - '**/*'
  base-directory: $LOCAL_STAGING_DIR_NAME